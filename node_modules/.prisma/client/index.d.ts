
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Cadastro_pacientes
 * 
 */
export type Cadastro_pacientes = $Result.DefaultSelection<Prisma.$Cadastro_pacientesPayload>
/**
 * Model Agendamento
 * 
 */
export type Agendamento = $Result.DefaultSelection<Prisma.$AgendamentoPayload>
/**
 * Model cadastro_convenio
 * 
 */
export type cadastro_convenio = $Result.DefaultSelection<Prisma.$cadastro_convenioPayload>
/**
 * Model cadastro_user
 * 
 */
export type cadastro_user = $Result.DefaultSelection<Prisma.$cadastro_userPayload>
/**
 * Model Fluxo_de_caixa
 * 
 */
export type Fluxo_de_caixa = $Result.DefaultSelection<Prisma.$Fluxo_de_caixaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cadastro_pacientes
 * const cadastro_pacientes = await prisma.cadastro_pacientes.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cadastro_pacientes
   * const cadastro_pacientes = await prisma.cadastro_pacientes.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cadastro_pacientes`: Exposes CRUD operations for the **Cadastro_pacientes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cadastro_pacientes
    * const cadastro_pacientes = await prisma.cadastro_pacientes.findMany()
    * ```
    */
  get cadastro_pacientes(): Prisma.Cadastro_pacientesDelegate<ExtArgs>;

  /**
   * `prisma.agendamento`: Exposes CRUD operations for the **Agendamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agendamentos
    * const agendamentos = await prisma.agendamento.findMany()
    * ```
    */
  get agendamento(): Prisma.AgendamentoDelegate<ExtArgs>;

  /**
   * `prisma.cadastro_convenio`: Exposes CRUD operations for the **cadastro_convenio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cadastro_convenios
    * const cadastro_convenios = await prisma.cadastro_convenio.findMany()
    * ```
    */
  get cadastro_convenio(): Prisma.cadastro_convenioDelegate<ExtArgs>;

  /**
   * `prisma.cadastro_user`: Exposes CRUD operations for the **cadastro_user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cadastro_users
    * const cadastro_users = await prisma.cadastro_user.findMany()
    * ```
    */
  get cadastro_user(): Prisma.cadastro_userDelegate<ExtArgs>;

  /**
   * `prisma.fluxo_de_caixa`: Exposes CRUD operations for the **Fluxo_de_caixa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fluxo_de_caixas
    * const fluxo_de_caixas = await prisma.fluxo_de_caixa.findMany()
    * ```
    */
  get fluxo_de_caixa(): Prisma.Fluxo_de_caixaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Cadastro_pacientes: 'Cadastro_pacientes',
    Agendamento: 'Agendamento',
    cadastro_convenio: 'cadastro_convenio',
    cadastro_user: 'cadastro_user',
    Fluxo_de_caixa: 'Fluxo_de_caixa'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'cadastro_pacientes' | 'agendamento' | 'cadastro_convenio' | 'cadastro_user' | 'fluxo_de_caixa'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Cadastro_pacientes: {
        payload: Prisma.$Cadastro_pacientesPayload<ExtArgs>
        fields: Prisma.Cadastro_pacientesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Cadastro_pacientesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Cadastro_pacientesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>
          }
          findFirst: {
            args: Prisma.Cadastro_pacientesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Cadastro_pacientesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>
          }
          findMany: {
            args: Prisma.Cadastro_pacientesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>[]
          }
          create: {
            args: Prisma.Cadastro_pacientesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>
          }
          createMany: {
            args: Prisma.Cadastro_pacientesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Cadastro_pacientesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>
          }
          update: {
            args: Prisma.Cadastro_pacientesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>
          }
          deleteMany: {
            args: Prisma.Cadastro_pacientesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Cadastro_pacientesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Cadastro_pacientesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>
          }
          aggregate: {
            args: Prisma.Cadastro_pacientesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCadastro_pacientes>
          }
          groupBy: {
            args: Prisma.Cadastro_pacientesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Cadastro_pacientesGroupByOutputType>[]
          }
          count: {
            args: Prisma.Cadastro_pacientesCountArgs<ExtArgs>,
            result: $Utils.Optional<Cadastro_pacientesCountAggregateOutputType> | number
          }
        }
      }
      Agendamento: {
        payload: Prisma.$AgendamentoPayload<ExtArgs>
        fields: Prisma.AgendamentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgendamentoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgendamentoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>
          }
          findFirst: {
            args: Prisma.AgendamentoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgendamentoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>
          }
          findMany: {
            args: Prisma.AgendamentoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>[]
          }
          create: {
            args: Prisma.AgendamentoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>
          }
          createMany: {
            args: Prisma.AgendamentoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AgendamentoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>
          }
          update: {
            args: Prisma.AgendamentoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>
          }
          deleteMany: {
            args: Prisma.AgendamentoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AgendamentoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AgendamentoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>
          }
          aggregate: {
            args: Prisma.AgendamentoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAgendamento>
          }
          groupBy: {
            args: Prisma.AgendamentoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AgendamentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgendamentoCountArgs<ExtArgs>,
            result: $Utils.Optional<AgendamentoCountAggregateOutputType> | number
          }
        }
      }
      cadastro_convenio: {
        payload: Prisma.$cadastro_convenioPayload<ExtArgs>
        fields: Prisma.cadastro_convenioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cadastro_convenioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cadastro_convenioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>
          }
          findFirst: {
            args: Prisma.cadastro_convenioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cadastro_convenioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>
          }
          findMany: {
            args: Prisma.cadastro_convenioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>[]
          }
          create: {
            args: Prisma.cadastro_convenioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>
          }
          createMany: {
            args: Prisma.cadastro_convenioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.cadastro_convenioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>
          }
          update: {
            args: Prisma.cadastro_convenioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>
          }
          deleteMany: {
            args: Prisma.cadastro_convenioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.cadastro_convenioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.cadastro_convenioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>
          }
          aggregate: {
            args: Prisma.Cadastro_convenioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCadastro_convenio>
          }
          groupBy: {
            args: Prisma.cadastro_convenioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Cadastro_convenioGroupByOutputType>[]
          }
          count: {
            args: Prisma.cadastro_convenioCountArgs<ExtArgs>,
            result: $Utils.Optional<Cadastro_convenioCountAggregateOutputType> | number
          }
        }
      }
      cadastro_user: {
        payload: Prisma.$cadastro_userPayload<ExtArgs>
        fields: Prisma.cadastro_userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cadastro_userFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cadastro_userFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>
          }
          findFirst: {
            args: Prisma.cadastro_userFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cadastro_userFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>
          }
          findMany: {
            args: Prisma.cadastro_userFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>[]
          }
          create: {
            args: Prisma.cadastro_userCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>
          }
          createMany: {
            args: Prisma.cadastro_userCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.cadastro_userDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>
          }
          update: {
            args: Prisma.cadastro_userUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>
          }
          deleteMany: {
            args: Prisma.cadastro_userDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.cadastro_userUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.cadastro_userUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>
          }
          aggregate: {
            args: Prisma.Cadastro_userAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCadastro_user>
          }
          groupBy: {
            args: Prisma.cadastro_userGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Cadastro_userGroupByOutputType>[]
          }
          count: {
            args: Prisma.cadastro_userCountArgs<ExtArgs>,
            result: $Utils.Optional<Cadastro_userCountAggregateOutputType> | number
          }
        }
      }
      Fluxo_de_caixa: {
        payload: Prisma.$Fluxo_de_caixaPayload<ExtArgs>
        fields: Prisma.Fluxo_de_caixaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Fluxo_de_caixaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Fluxo_de_caixaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>
          }
          findFirst: {
            args: Prisma.Fluxo_de_caixaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Fluxo_de_caixaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>
          }
          findMany: {
            args: Prisma.Fluxo_de_caixaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>[]
          }
          create: {
            args: Prisma.Fluxo_de_caixaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>
          }
          createMany: {
            args: Prisma.Fluxo_de_caixaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Fluxo_de_caixaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>
          }
          update: {
            args: Prisma.Fluxo_de_caixaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>
          }
          deleteMany: {
            args: Prisma.Fluxo_de_caixaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Fluxo_de_caixaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Fluxo_de_caixaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>
          }
          aggregate: {
            args: Prisma.Fluxo_de_caixaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFluxo_de_caixa>
          }
          groupBy: {
            args: Prisma.Fluxo_de_caixaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Fluxo_de_caixaGroupByOutputType>[]
          }
          count: {
            args: Prisma.Fluxo_de_caixaCountArgs<ExtArgs>,
            result: $Utils.Optional<Fluxo_de_caixaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Cadastro_pacientes
   */

  export type AggregateCadastro_pacientes = {
    _count: Cadastro_pacientesCountAggregateOutputType | null
    _min: Cadastro_pacientesMinAggregateOutputType | null
    _max: Cadastro_pacientesMaxAggregateOutputType | null
  }

  export type Cadastro_pacientesMinAggregateOutputType = {
    id: string | null
    Nome: string | null
    Telefone: string | null
    Email: string | null
    CPF_CNPJ: string | null
    Endereco: string | null
    Numero: string | null
    CEP: string | null
  }

  export type Cadastro_pacientesMaxAggregateOutputType = {
    id: string | null
    Nome: string | null
    Telefone: string | null
    Email: string | null
    CPF_CNPJ: string | null
    Endereco: string | null
    Numero: string | null
    CEP: string | null
  }

  export type Cadastro_pacientesCountAggregateOutputType = {
    id: number
    Nome: number
    Telefone: number
    Email: number
    CPF_CNPJ: number
    Endereco: number
    Numero: number
    CEP: number
    _all: number
  }


  export type Cadastro_pacientesMinAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Email?: true
    CPF_CNPJ?: true
    Endereco?: true
    Numero?: true
    CEP?: true
  }

  export type Cadastro_pacientesMaxAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Email?: true
    CPF_CNPJ?: true
    Endereco?: true
    Numero?: true
    CEP?: true
  }

  export type Cadastro_pacientesCountAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Email?: true
    CPF_CNPJ?: true
    Endereco?: true
    Numero?: true
    CEP?: true
    _all?: true
  }

  export type Cadastro_pacientesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cadastro_pacientes to aggregate.
     */
    where?: Cadastro_pacientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cadastro_pacientes to fetch.
     */
    orderBy?: Cadastro_pacientesOrderByWithRelationInput | Cadastro_pacientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Cadastro_pacientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cadastro_pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cadastro_pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cadastro_pacientes
    **/
    _count?: true | Cadastro_pacientesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cadastro_pacientesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cadastro_pacientesMaxAggregateInputType
  }

  export type GetCadastro_pacientesAggregateType<T extends Cadastro_pacientesAggregateArgs> = {
        [P in keyof T & keyof AggregateCadastro_pacientes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCadastro_pacientes[P]>
      : GetScalarType<T[P], AggregateCadastro_pacientes[P]>
  }




  export type Cadastro_pacientesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Cadastro_pacientesWhereInput
    orderBy?: Cadastro_pacientesOrderByWithAggregationInput | Cadastro_pacientesOrderByWithAggregationInput[]
    by: Cadastro_pacientesScalarFieldEnum[] | Cadastro_pacientesScalarFieldEnum
    having?: Cadastro_pacientesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cadastro_pacientesCountAggregateInputType | true
    _min?: Cadastro_pacientesMinAggregateInputType
    _max?: Cadastro_pacientesMaxAggregateInputType
  }

  export type Cadastro_pacientesGroupByOutputType = {
    id: string
    Nome: string
    Telefone: string
    Email: string
    CPF_CNPJ: string
    Endereco: string
    Numero: string
    CEP: string
    _count: Cadastro_pacientesCountAggregateOutputType | null
    _min: Cadastro_pacientesMinAggregateOutputType | null
    _max: Cadastro_pacientesMaxAggregateOutputType | null
  }

  type GetCadastro_pacientesGroupByPayload<T extends Cadastro_pacientesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cadastro_pacientesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cadastro_pacientesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cadastro_pacientesGroupByOutputType[P]>
            : GetScalarType<T[P], Cadastro_pacientesGroupByOutputType[P]>
        }
      >
    >


  export type Cadastro_pacientesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome?: boolean
    Telefone?: boolean
    Email?: boolean
    CPF_CNPJ?: boolean
    Endereco?: boolean
    Numero?: boolean
    CEP?: boolean
  }, ExtArgs["result"]["cadastro_pacientes"]>

  export type Cadastro_pacientesSelectScalar = {
    id?: boolean
    Nome?: boolean
    Telefone?: boolean
    Email?: boolean
    CPF_CNPJ?: boolean
    Endereco?: boolean
    Numero?: boolean
    CEP?: boolean
  }


  export type $Cadastro_pacientesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cadastro_pacientes"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Nome: string
      Telefone: string
      Email: string
      CPF_CNPJ: string
      Endereco: string
      Numero: string
      CEP: string
    }, ExtArgs["result"]["cadastro_pacientes"]>
    composites: {}
  }


  type Cadastro_pacientesGetPayload<S extends boolean | null | undefined | Cadastro_pacientesDefaultArgs> = $Result.GetResult<Prisma.$Cadastro_pacientesPayload, S>

  type Cadastro_pacientesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Cadastro_pacientesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Cadastro_pacientesCountAggregateInputType | true
    }

  export interface Cadastro_pacientesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cadastro_pacientes'], meta: { name: 'Cadastro_pacientes' } }
    /**
     * Find zero or one Cadastro_pacientes that matches the filter.
     * @param {Cadastro_pacientesFindUniqueArgs} args - Arguments to find a Cadastro_pacientes
     * @example
     * // Get one Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Cadastro_pacientesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Cadastro_pacientesFindUniqueArgs<ExtArgs>>
    ): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cadastro_pacientes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Cadastro_pacientesFindUniqueOrThrowArgs} args - Arguments to find a Cadastro_pacientes
     * @example
     * // Get one Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Cadastro_pacientesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Cadastro_pacientesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cadastro_pacientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_pacientesFindFirstArgs} args - Arguments to find a Cadastro_pacientes
     * @example
     * // Get one Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Cadastro_pacientesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Cadastro_pacientesFindFirstArgs<ExtArgs>>
    ): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cadastro_pacientes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_pacientesFindFirstOrThrowArgs} args - Arguments to find a Cadastro_pacientes
     * @example
     * // Get one Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Cadastro_pacientesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Cadastro_pacientesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cadastro_pacientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_pacientesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.findMany()
     * 
     * // Get first 10 Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cadastro_pacientesWithIdOnly = await prisma.cadastro_pacientes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Cadastro_pacientesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Cadastro_pacientesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cadastro_pacientes.
     * @param {Cadastro_pacientesCreateArgs} args - Arguments to create a Cadastro_pacientes.
     * @example
     * // Create one Cadastro_pacientes
     * const Cadastro_pacientes = await prisma.cadastro_pacientes.create({
     *   data: {
     *     // ... data to create a Cadastro_pacientes
     *   }
     * })
     * 
    **/
    create<T extends Cadastro_pacientesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Cadastro_pacientesCreateArgs<ExtArgs>>
    ): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cadastro_pacientes.
     *     @param {Cadastro_pacientesCreateManyArgs} args - Arguments to create many Cadastro_pacientes.
     *     @example
     *     // Create many Cadastro_pacientes
     *     const cadastro_pacientes = await prisma.cadastro_pacientes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Cadastro_pacientesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Cadastro_pacientesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cadastro_pacientes.
     * @param {Cadastro_pacientesDeleteArgs} args - Arguments to delete one Cadastro_pacientes.
     * @example
     * // Delete one Cadastro_pacientes
     * const Cadastro_pacientes = await prisma.cadastro_pacientes.delete({
     *   where: {
     *     // ... filter to delete one Cadastro_pacientes
     *   }
     * })
     * 
    **/
    delete<T extends Cadastro_pacientesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Cadastro_pacientesDeleteArgs<ExtArgs>>
    ): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cadastro_pacientes.
     * @param {Cadastro_pacientesUpdateArgs} args - Arguments to update one Cadastro_pacientes.
     * @example
     * // Update one Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Cadastro_pacientesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Cadastro_pacientesUpdateArgs<ExtArgs>>
    ): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cadastro_pacientes.
     * @param {Cadastro_pacientesDeleteManyArgs} args - Arguments to filter Cadastro_pacientes to delete.
     * @example
     * // Delete a few Cadastro_pacientes
     * const { count } = await prisma.cadastro_pacientes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Cadastro_pacientesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Cadastro_pacientesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cadastro_pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_pacientesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Cadastro_pacientesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Cadastro_pacientesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cadastro_pacientes.
     * @param {Cadastro_pacientesUpsertArgs} args - Arguments to update or create a Cadastro_pacientes.
     * @example
     * // Update or create a Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.upsert({
     *   create: {
     *     // ... data to create a Cadastro_pacientes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cadastro_pacientes we want to update
     *   }
     * })
    **/
    upsert<T extends Cadastro_pacientesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Cadastro_pacientesUpsertArgs<ExtArgs>>
    ): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cadastro_pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_pacientesCountArgs} args - Arguments to filter Cadastro_pacientes to count.
     * @example
     * // Count the number of Cadastro_pacientes
     * const count = await prisma.cadastro_pacientes.count({
     *   where: {
     *     // ... the filter for the Cadastro_pacientes we want to count
     *   }
     * })
    **/
    count<T extends Cadastro_pacientesCountArgs>(
      args?: Subset<T, Cadastro_pacientesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cadastro_pacientesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cadastro_pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_pacientesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cadastro_pacientesAggregateArgs>(args: Subset<T, Cadastro_pacientesAggregateArgs>): Prisma.PrismaPromise<GetCadastro_pacientesAggregateType<T>>

    /**
     * Group by Cadastro_pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_pacientesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Cadastro_pacientesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Cadastro_pacientesGroupByArgs['orderBy'] }
        : { orderBy?: Cadastro_pacientesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Cadastro_pacientesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCadastro_pacientesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cadastro_pacientes model
   */
  readonly fields: Cadastro_pacientesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cadastro_pacientes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Cadastro_pacientesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Cadastro_pacientes model
   */ 
  interface Cadastro_pacientesFieldRefs {
    readonly id: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Nome: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Telefone: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Email: FieldRef<"Cadastro_pacientes", 'String'>
    readonly CPF_CNPJ: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Endereco: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Numero: FieldRef<"Cadastro_pacientes", 'String'>
    readonly CEP: FieldRef<"Cadastro_pacientes", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Cadastro_pacientes findUnique
   */
  export type Cadastro_pacientesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Filter, which Cadastro_pacientes to fetch.
     */
    where: Cadastro_pacientesWhereUniqueInput
  }


  /**
   * Cadastro_pacientes findUniqueOrThrow
   */
  export type Cadastro_pacientesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Filter, which Cadastro_pacientes to fetch.
     */
    where: Cadastro_pacientesWhereUniqueInput
  }


  /**
   * Cadastro_pacientes findFirst
   */
  export type Cadastro_pacientesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Filter, which Cadastro_pacientes to fetch.
     */
    where?: Cadastro_pacientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cadastro_pacientes to fetch.
     */
    orderBy?: Cadastro_pacientesOrderByWithRelationInput | Cadastro_pacientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cadastro_pacientes.
     */
    cursor?: Cadastro_pacientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cadastro_pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cadastro_pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cadastro_pacientes.
     */
    distinct?: Cadastro_pacientesScalarFieldEnum | Cadastro_pacientesScalarFieldEnum[]
  }


  /**
   * Cadastro_pacientes findFirstOrThrow
   */
  export type Cadastro_pacientesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Filter, which Cadastro_pacientes to fetch.
     */
    where?: Cadastro_pacientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cadastro_pacientes to fetch.
     */
    orderBy?: Cadastro_pacientesOrderByWithRelationInput | Cadastro_pacientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cadastro_pacientes.
     */
    cursor?: Cadastro_pacientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cadastro_pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cadastro_pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cadastro_pacientes.
     */
    distinct?: Cadastro_pacientesScalarFieldEnum | Cadastro_pacientesScalarFieldEnum[]
  }


  /**
   * Cadastro_pacientes findMany
   */
  export type Cadastro_pacientesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Filter, which Cadastro_pacientes to fetch.
     */
    where?: Cadastro_pacientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cadastro_pacientes to fetch.
     */
    orderBy?: Cadastro_pacientesOrderByWithRelationInput | Cadastro_pacientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cadastro_pacientes.
     */
    cursor?: Cadastro_pacientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cadastro_pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cadastro_pacientes.
     */
    skip?: number
    distinct?: Cadastro_pacientesScalarFieldEnum | Cadastro_pacientesScalarFieldEnum[]
  }


  /**
   * Cadastro_pacientes create
   */
  export type Cadastro_pacientesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * The data needed to create a Cadastro_pacientes.
     */
    data: XOR<Cadastro_pacientesCreateInput, Cadastro_pacientesUncheckedCreateInput>
  }


  /**
   * Cadastro_pacientes createMany
   */
  export type Cadastro_pacientesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cadastro_pacientes.
     */
    data: Cadastro_pacientesCreateManyInput | Cadastro_pacientesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Cadastro_pacientes update
   */
  export type Cadastro_pacientesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * The data needed to update a Cadastro_pacientes.
     */
    data: XOR<Cadastro_pacientesUpdateInput, Cadastro_pacientesUncheckedUpdateInput>
    /**
     * Choose, which Cadastro_pacientes to update.
     */
    where: Cadastro_pacientesWhereUniqueInput
  }


  /**
   * Cadastro_pacientes updateMany
   */
  export type Cadastro_pacientesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cadastro_pacientes.
     */
    data: XOR<Cadastro_pacientesUpdateManyMutationInput, Cadastro_pacientesUncheckedUpdateManyInput>
    /**
     * Filter which Cadastro_pacientes to update
     */
    where?: Cadastro_pacientesWhereInput
  }


  /**
   * Cadastro_pacientes upsert
   */
  export type Cadastro_pacientesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * The filter to search for the Cadastro_pacientes to update in case it exists.
     */
    where: Cadastro_pacientesWhereUniqueInput
    /**
     * In case the Cadastro_pacientes found by the `where` argument doesn't exist, create a new Cadastro_pacientes with this data.
     */
    create: XOR<Cadastro_pacientesCreateInput, Cadastro_pacientesUncheckedCreateInput>
    /**
     * In case the Cadastro_pacientes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Cadastro_pacientesUpdateInput, Cadastro_pacientesUncheckedUpdateInput>
  }


  /**
   * Cadastro_pacientes delete
   */
  export type Cadastro_pacientesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Filter which Cadastro_pacientes to delete.
     */
    where: Cadastro_pacientesWhereUniqueInput
  }


  /**
   * Cadastro_pacientes deleteMany
   */
  export type Cadastro_pacientesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cadastro_pacientes to delete
     */
    where?: Cadastro_pacientesWhereInput
  }


  /**
   * Cadastro_pacientes without action
   */
  export type Cadastro_pacientesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
  }



  /**
   * Model Agendamento
   */

  export type AggregateAgendamento = {
    _count: AgendamentoCountAggregateOutputType | null
    _min: AgendamentoMinAggregateOutputType | null
    _max: AgendamentoMaxAggregateOutputType | null
  }

  export type AgendamentoMinAggregateOutputType = {
    id: string | null
    Nome: string | null
    Telefone: string | null
    Especialista: string | null
    Data_do_Atendimento: string | null
    Horario_da_consulta: string | null
    Valor_da_Consulta: string | null
    Status_da_Consulta: string | null
    Status_do_pagamento: string | null
    observacao: string | null
  }

  export type AgendamentoMaxAggregateOutputType = {
    id: string | null
    Nome: string | null
    Telefone: string | null
    Especialista: string | null
    Data_do_Atendimento: string | null
    Horario_da_consulta: string | null
    Valor_da_Consulta: string | null
    Status_da_Consulta: string | null
    Status_do_pagamento: string | null
    observacao: string | null
  }

  export type AgendamentoCountAggregateOutputType = {
    id: number
    Nome: number
    Telefone: number
    Especialista: number
    Data_do_Atendimento: number
    Horario_da_consulta: number
    Valor_da_Consulta: number
    Status_da_Consulta: number
    Status_do_pagamento: number
    observacao: number
    _all: number
  }


  export type AgendamentoMinAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Especialista?: true
    Data_do_Atendimento?: true
    Horario_da_consulta?: true
    Valor_da_Consulta?: true
    Status_da_Consulta?: true
    Status_do_pagamento?: true
    observacao?: true
  }

  export type AgendamentoMaxAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Especialista?: true
    Data_do_Atendimento?: true
    Horario_da_consulta?: true
    Valor_da_Consulta?: true
    Status_da_Consulta?: true
    Status_do_pagamento?: true
    observacao?: true
  }

  export type AgendamentoCountAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Especialista?: true
    Data_do_Atendimento?: true
    Horario_da_consulta?: true
    Valor_da_Consulta?: true
    Status_da_Consulta?: true
    Status_do_pagamento?: true
    observacao?: true
    _all?: true
  }

  export type AgendamentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agendamento to aggregate.
     */
    where?: AgendamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agendamentos to fetch.
     */
    orderBy?: AgendamentoOrderByWithRelationInput | AgendamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgendamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agendamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agendamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agendamentos
    **/
    _count?: true | AgendamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgendamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgendamentoMaxAggregateInputType
  }

  export type GetAgendamentoAggregateType<T extends AgendamentoAggregateArgs> = {
        [P in keyof T & keyof AggregateAgendamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgendamento[P]>
      : GetScalarType<T[P], AggregateAgendamento[P]>
  }




  export type AgendamentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendamentoWhereInput
    orderBy?: AgendamentoOrderByWithAggregationInput | AgendamentoOrderByWithAggregationInput[]
    by: AgendamentoScalarFieldEnum[] | AgendamentoScalarFieldEnum
    having?: AgendamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgendamentoCountAggregateInputType | true
    _min?: AgendamentoMinAggregateInputType
    _max?: AgendamentoMaxAggregateInputType
  }

  export type AgendamentoGroupByOutputType = {
    id: string
    Nome: string
    Telefone: string
    Especialista: string
    Data_do_Atendimento: string
    Horario_da_consulta: string
    Valor_da_Consulta: string
    Status_da_Consulta: string
    Status_do_pagamento: string
    observacao: string
    _count: AgendamentoCountAggregateOutputType | null
    _min: AgendamentoMinAggregateOutputType | null
    _max: AgendamentoMaxAggregateOutputType | null
  }

  type GetAgendamentoGroupByPayload<T extends AgendamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgendamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgendamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgendamentoGroupByOutputType[P]>
            : GetScalarType<T[P], AgendamentoGroupByOutputType[P]>
        }
      >
    >


  export type AgendamentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome?: boolean
    Telefone?: boolean
    Especialista?: boolean
    Data_do_Atendimento?: boolean
    Horario_da_consulta?: boolean
    Valor_da_Consulta?: boolean
    Status_da_Consulta?: boolean
    Status_do_pagamento?: boolean
    observacao?: boolean
  }, ExtArgs["result"]["agendamento"]>

  export type AgendamentoSelectScalar = {
    id?: boolean
    Nome?: boolean
    Telefone?: boolean
    Especialista?: boolean
    Data_do_Atendimento?: boolean
    Horario_da_consulta?: boolean
    Valor_da_Consulta?: boolean
    Status_da_Consulta?: boolean
    Status_do_pagamento?: boolean
    observacao?: boolean
  }


  export type $AgendamentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Agendamento"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Nome: string
      Telefone: string
      Especialista: string
      Data_do_Atendimento: string
      Horario_da_consulta: string
      Valor_da_Consulta: string
      Status_da_Consulta: string
      Status_do_pagamento: string
      observacao: string
    }, ExtArgs["result"]["agendamento"]>
    composites: {}
  }


  type AgendamentoGetPayload<S extends boolean | null | undefined | AgendamentoDefaultArgs> = $Result.GetResult<Prisma.$AgendamentoPayload, S>

  type AgendamentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgendamentoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgendamentoCountAggregateInputType | true
    }

  export interface AgendamentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agendamento'], meta: { name: 'Agendamento' } }
    /**
     * Find zero or one Agendamento that matches the filter.
     * @param {AgendamentoFindUniqueArgs} args - Arguments to find a Agendamento
     * @example
     * // Get one Agendamento
     * const agendamento = await prisma.agendamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AgendamentoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AgendamentoFindUniqueArgs<ExtArgs>>
    ): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Agendamento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AgendamentoFindUniqueOrThrowArgs} args - Arguments to find a Agendamento
     * @example
     * // Get one Agendamento
     * const agendamento = await prisma.agendamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AgendamentoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgendamentoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Agendamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoFindFirstArgs} args - Arguments to find a Agendamento
     * @example
     * // Get one Agendamento
     * const agendamento = await prisma.agendamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AgendamentoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AgendamentoFindFirstArgs<ExtArgs>>
    ): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Agendamento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoFindFirstOrThrowArgs} args - Arguments to find a Agendamento
     * @example
     * // Get one Agendamento
     * const agendamento = await prisma.agendamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AgendamentoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgendamentoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Agendamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agendamentos
     * const agendamentos = await prisma.agendamento.findMany()
     * 
     * // Get first 10 Agendamentos
     * const agendamentos = await prisma.agendamento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agendamentoWithIdOnly = await prisma.agendamento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AgendamentoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgendamentoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Agendamento.
     * @param {AgendamentoCreateArgs} args - Arguments to create a Agendamento.
     * @example
     * // Create one Agendamento
     * const Agendamento = await prisma.agendamento.create({
     *   data: {
     *     // ... data to create a Agendamento
     *   }
     * })
     * 
    **/
    create<T extends AgendamentoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AgendamentoCreateArgs<ExtArgs>>
    ): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Agendamentos.
     *     @param {AgendamentoCreateManyArgs} args - Arguments to create many Agendamentos.
     *     @example
     *     // Create many Agendamentos
     *     const agendamento = await prisma.agendamento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AgendamentoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgendamentoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Agendamento.
     * @param {AgendamentoDeleteArgs} args - Arguments to delete one Agendamento.
     * @example
     * // Delete one Agendamento
     * const Agendamento = await prisma.agendamento.delete({
     *   where: {
     *     // ... filter to delete one Agendamento
     *   }
     * })
     * 
    **/
    delete<T extends AgendamentoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AgendamentoDeleteArgs<ExtArgs>>
    ): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Agendamento.
     * @param {AgendamentoUpdateArgs} args - Arguments to update one Agendamento.
     * @example
     * // Update one Agendamento
     * const agendamento = await prisma.agendamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AgendamentoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AgendamentoUpdateArgs<ExtArgs>>
    ): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Agendamentos.
     * @param {AgendamentoDeleteManyArgs} args - Arguments to filter Agendamentos to delete.
     * @example
     * // Delete a few Agendamentos
     * const { count } = await prisma.agendamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AgendamentoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgendamentoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agendamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agendamentos
     * const agendamento = await prisma.agendamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AgendamentoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AgendamentoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Agendamento.
     * @param {AgendamentoUpsertArgs} args - Arguments to update or create a Agendamento.
     * @example
     * // Update or create a Agendamento
     * const agendamento = await prisma.agendamento.upsert({
     *   create: {
     *     // ... data to create a Agendamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agendamento we want to update
     *   }
     * })
    **/
    upsert<T extends AgendamentoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AgendamentoUpsertArgs<ExtArgs>>
    ): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Agendamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoCountArgs} args - Arguments to filter Agendamentos to count.
     * @example
     * // Count the number of Agendamentos
     * const count = await prisma.agendamento.count({
     *   where: {
     *     // ... the filter for the Agendamentos we want to count
     *   }
     * })
    **/
    count<T extends AgendamentoCountArgs>(
      args?: Subset<T, AgendamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgendamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agendamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgendamentoAggregateArgs>(args: Subset<T, AgendamentoAggregateArgs>): Prisma.PrismaPromise<GetAgendamentoAggregateType<T>>

    /**
     * Group by Agendamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgendamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgendamentoGroupByArgs['orderBy'] }
        : { orderBy?: AgendamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgendamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgendamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Agendamento model
   */
  readonly fields: AgendamentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agendamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgendamentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Agendamento model
   */ 
  interface AgendamentoFieldRefs {
    readonly id: FieldRef<"Agendamento", 'String'>
    readonly Nome: FieldRef<"Agendamento", 'String'>
    readonly Telefone: FieldRef<"Agendamento", 'String'>
    readonly Especialista: FieldRef<"Agendamento", 'String'>
    readonly Data_do_Atendimento: FieldRef<"Agendamento", 'String'>
    readonly Horario_da_consulta: FieldRef<"Agendamento", 'String'>
    readonly Valor_da_Consulta: FieldRef<"Agendamento", 'String'>
    readonly Status_da_Consulta: FieldRef<"Agendamento", 'String'>
    readonly Status_do_pagamento: FieldRef<"Agendamento", 'String'>
    readonly observacao: FieldRef<"Agendamento", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Agendamento findUnique
   */
  export type AgendamentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Filter, which Agendamento to fetch.
     */
    where: AgendamentoWhereUniqueInput
  }


  /**
   * Agendamento findUniqueOrThrow
   */
  export type AgendamentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Filter, which Agendamento to fetch.
     */
    where: AgendamentoWhereUniqueInput
  }


  /**
   * Agendamento findFirst
   */
  export type AgendamentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Filter, which Agendamento to fetch.
     */
    where?: AgendamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agendamentos to fetch.
     */
    orderBy?: AgendamentoOrderByWithRelationInput | AgendamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agendamentos.
     */
    cursor?: AgendamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agendamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agendamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agendamentos.
     */
    distinct?: AgendamentoScalarFieldEnum | AgendamentoScalarFieldEnum[]
  }


  /**
   * Agendamento findFirstOrThrow
   */
  export type AgendamentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Filter, which Agendamento to fetch.
     */
    where?: AgendamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agendamentos to fetch.
     */
    orderBy?: AgendamentoOrderByWithRelationInput | AgendamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agendamentos.
     */
    cursor?: AgendamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agendamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agendamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agendamentos.
     */
    distinct?: AgendamentoScalarFieldEnum | AgendamentoScalarFieldEnum[]
  }


  /**
   * Agendamento findMany
   */
  export type AgendamentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Filter, which Agendamentos to fetch.
     */
    where?: AgendamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agendamentos to fetch.
     */
    orderBy?: AgendamentoOrderByWithRelationInput | AgendamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agendamentos.
     */
    cursor?: AgendamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agendamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agendamentos.
     */
    skip?: number
    distinct?: AgendamentoScalarFieldEnum | AgendamentoScalarFieldEnum[]
  }


  /**
   * Agendamento create
   */
  export type AgendamentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * The data needed to create a Agendamento.
     */
    data: XOR<AgendamentoCreateInput, AgendamentoUncheckedCreateInput>
  }


  /**
   * Agendamento createMany
   */
  export type AgendamentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agendamentos.
     */
    data: AgendamentoCreateManyInput | AgendamentoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Agendamento update
   */
  export type AgendamentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * The data needed to update a Agendamento.
     */
    data: XOR<AgendamentoUpdateInput, AgendamentoUncheckedUpdateInput>
    /**
     * Choose, which Agendamento to update.
     */
    where: AgendamentoWhereUniqueInput
  }


  /**
   * Agendamento updateMany
   */
  export type AgendamentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agendamentos.
     */
    data: XOR<AgendamentoUpdateManyMutationInput, AgendamentoUncheckedUpdateManyInput>
    /**
     * Filter which Agendamentos to update
     */
    where?: AgendamentoWhereInput
  }


  /**
   * Agendamento upsert
   */
  export type AgendamentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * The filter to search for the Agendamento to update in case it exists.
     */
    where: AgendamentoWhereUniqueInput
    /**
     * In case the Agendamento found by the `where` argument doesn't exist, create a new Agendamento with this data.
     */
    create: XOR<AgendamentoCreateInput, AgendamentoUncheckedCreateInput>
    /**
     * In case the Agendamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgendamentoUpdateInput, AgendamentoUncheckedUpdateInput>
  }


  /**
   * Agendamento delete
   */
  export type AgendamentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Filter which Agendamento to delete.
     */
    where: AgendamentoWhereUniqueInput
  }


  /**
   * Agendamento deleteMany
   */
  export type AgendamentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agendamentos to delete
     */
    where?: AgendamentoWhereInput
  }


  /**
   * Agendamento without action
   */
  export type AgendamentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
  }



  /**
   * Model cadastro_convenio
   */

  export type AggregateCadastro_convenio = {
    _count: Cadastro_convenioCountAggregateOutputType | null
    _min: Cadastro_convenioMinAggregateOutputType | null
    _max: Cadastro_convenioMaxAggregateOutputType | null
  }

  export type Cadastro_convenioMinAggregateOutputType = {
    id: string | null
    Nome_do_Convenio: string | null
    CNPJ: string | null
    Valores: string | null
    Data_de_Contratacao: string | null
  }

  export type Cadastro_convenioMaxAggregateOutputType = {
    id: string | null
    Nome_do_Convenio: string | null
    CNPJ: string | null
    Valores: string | null
    Data_de_Contratacao: string | null
  }

  export type Cadastro_convenioCountAggregateOutputType = {
    id: number
    Nome_do_Convenio: number
    CNPJ: number
    Valores: number
    Data_de_Contratacao: number
    _all: number
  }


  export type Cadastro_convenioMinAggregateInputType = {
    id?: true
    Nome_do_Convenio?: true
    CNPJ?: true
    Valores?: true
    Data_de_Contratacao?: true
  }

  export type Cadastro_convenioMaxAggregateInputType = {
    id?: true
    Nome_do_Convenio?: true
    CNPJ?: true
    Valores?: true
    Data_de_Contratacao?: true
  }

  export type Cadastro_convenioCountAggregateInputType = {
    id?: true
    Nome_do_Convenio?: true
    CNPJ?: true
    Valores?: true
    Data_de_Contratacao?: true
    _all?: true
  }

  export type Cadastro_convenioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_convenio to aggregate.
     */
    where?: cadastro_convenioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_convenios to fetch.
     */
    orderBy?: cadastro_convenioOrderByWithRelationInput | cadastro_convenioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cadastro_convenioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_convenios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_convenios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cadastro_convenios
    **/
    _count?: true | Cadastro_convenioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cadastro_convenioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cadastro_convenioMaxAggregateInputType
  }

  export type GetCadastro_convenioAggregateType<T extends Cadastro_convenioAggregateArgs> = {
        [P in keyof T & keyof AggregateCadastro_convenio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCadastro_convenio[P]>
      : GetScalarType<T[P], AggregateCadastro_convenio[P]>
  }




  export type cadastro_convenioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cadastro_convenioWhereInput
    orderBy?: cadastro_convenioOrderByWithAggregationInput | cadastro_convenioOrderByWithAggregationInput[]
    by: Cadastro_convenioScalarFieldEnum[] | Cadastro_convenioScalarFieldEnum
    having?: cadastro_convenioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cadastro_convenioCountAggregateInputType | true
    _min?: Cadastro_convenioMinAggregateInputType
    _max?: Cadastro_convenioMaxAggregateInputType
  }

  export type Cadastro_convenioGroupByOutputType = {
    id: string
    Nome_do_Convenio: string
    CNPJ: string
    Valores: string
    Data_de_Contratacao: string
    _count: Cadastro_convenioCountAggregateOutputType | null
    _min: Cadastro_convenioMinAggregateOutputType | null
    _max: Cadastro_convenioMaxAggregateOutputType | null
  }

  type GetCadastro_convenioGroupByPayload<T extends cadastro_convenioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cadastro_convenioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cadastro_convenioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cadastro_convenioGroupByOutputType[P]>
            : GetScalarType<T[P], Cadastro_convenioGroupByOutputType[P]>
        }
      >
    >


  export type cadastro_convenioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome_do_Convenio?: boolean
    CNPJ?: boolean
    Valores?: boolean
    Data_de_Contratacao?: boolean
  }, ExtArgs["result"]["cadastro_convenio"]>

  export type cadastro_convenioSelectScalar = {
    id?: boolean
    Nome_do_Convenio?: boolean
    CNPJ?: boolean
    Valores?: boolean
    Data_de_Contratacao?: boolean
  }


  export type $cadastro_convenioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cadastro_convenio"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Nome_do_Convenio: string
      CNPJ: string
      Valores: string
      Data_de_Contratacao: string
    }, ExtArgs["result"]["cadastro_convenio"]>
    composites: {}
  }


  type cadastro_convenioGetPayload<S extends boolean | null | undefined | cadastro_convenioDefaultArgs> = $Result.GetResult<Prisma.$cadastro_convenioPayload, S>

  type cadastro_convenioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cadastro_convenioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Cadastro_convenioCountAggregateInputType | true
    }

  export interface cadastro_convenioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cadastro_convenio'], meta: { name: 'cadastro_convenio' } }
    /**
     * Find zero or one Cadastro_convenio that matches the filter.
     * @param {cadastro_convenioFindUniqueArgs} args - Arguments to find a Cadastro_convenio
     * @example
     * // Get one Cadastro_convenio
     * const cadastro_convenio = await prisma.cadastro_convenio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cadastro_convenioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, cadastro_convenioFindUniqueArgs<ExtArgs>>
    ): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cadastro_convenio that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {cadastro_convenioFindUniqueOrThrowArgs} args - Arguments to find a Cadastro_convenio
     * @example
     * // Get one Cadastro_convenio
     * const cadastro_convenio = await prisma.cadastro_convenio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cadastro_convenioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastro_convenioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cadastro_convenio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_convenioFindFirstArgs} args - Arguments to find a Cadastro_convenio
     * @example
     * // Get one Cadastro_convenio
     * const cadastro_convenio = await prisma.cadastro_convenio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cadastro_convenioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastro_convenioFindFirstArgs<ExtArgs>>
    ): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cadastro_convenio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_convenioFindFirstOrThrowArgs} args - Arguments to find a Cadastro_convenio
     * @example
     * // Get one Cadastro_convenio
     * const cadastro_convenio = await prisma.cadastro_convenio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cadastro_convenioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastro_convenioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cadastro_convenios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_convenioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cadastro_convenios
     * const cadastro_convenios = await prisma.cadastro_convenio.findMany()
     * 
     * // Get first 10 Cadastro_convenios
     * const cadastro_convenios = await prisma.cadastro_convenio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cadastro_convenioWithIdOnly = await prisma.cadastro_convenio.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends cadastro_convenioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastro_convenioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cadastro_convenio.
     * @param {cadastro_convenioCreateArgs} args - Arguments to create a Cadastro_convenio.
     * @example
     * // Create one Cadastro_convenio
     * const Cadastro_convenio = await prisma.cadastro_convenio.create({
     *   data: {
     *     // ... data to create a Cadastro_convenio
     *   }
     * })
     * 
    **/
    create<T extends cadastro_convenioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, cadastro_convenioCreateArgs<ExtArgs>>
    ): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cadastro_convenios.
     *     @param {cadastro_convenioCreateManyArgs} args - Arguments to create many Cadastro_convenios.
     *     @example
     *     // Create many Cadastro_convenios
     *     const cadastro_convenio = await prisma.cadastro_convenio.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cadastro_convenioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastro_convenioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cadastro_convenio.
     * @param {cadastro_convenioDeleteArgs} args - Arguments to delete one Cadastro_convenio.
     * @example
     * // Delete one Cadastro_convenio
     * const Cadastro_convenio = await prisma.cadastro_convenio.delete({
     *   where: {
     *     // ... filter to delete one Cadastro_convenio
     *   }
     * })
     * 
    **/
    delete<T extends cadastro_convenioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, cadastro_convenioDeleteArgs<ExtArgs>>
    ): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cadastro_convenio.
     * @param {cadastro_convenioUpdateArgs} args - Arguments to update one Cadastro_convenio.
     * @example
     * // Update one Cadastro_convenio
     * const cadastro_convenio = await prisma.cadastro_convenio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cadastro_convenioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, cadastro_convenioUpdateArgs<ExtArgs>>
    ): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cadastro_convenios.
     * @param {cadastro_convenioDeleteManyArgs} args - Arguments to filter Cadastro_convenios to delete.
     * @example
     * // Delete a few Cadastro_convenios
     * const { count } = await prisma.cadastro_convenio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cadastro_convenioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastro_convenioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cadastro_convenios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_convenioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cadastro_convenios
     * const cadastro_convenio = await prisma.cadastro_convenio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cadastro_convenioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, cadastro_convenioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cadastro_convenio.
     * @param {cadastro_convenioUpsertArgs} args - Arguments to update or create a Cadastro_convenio.
     * @example
     * // Update or create a Cadastro_convenio
     * const cadastro_convenio = await prisma.cadastro_convenio.upsert({
     *   create: {
     *     // ... data to create a Cadastro_convenio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cadastro_convenio we want to update
     *   }
     * })
    **/
    upsert<T extends cadastro_convenioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, cadastro_convenioUpsertArgs<ExtArgs>>
    ): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cadastro_convenios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_convenioCountArgs} args - Arguments to filter Cadastro_convenios to count.
     * @example
     * // Count the number of Cadastro_convenios
     * const count = await prisma.cadastro_convenio.count({
     *   where: {
     *     // ... the filter for the Cadastro_convenios we want to count
     *   }
     * })
    **/
    count<T extends cadastro_convenioCountArgs>(
      args?: Subset<T, cadastro_convenioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cadastro_convenioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cadastro_convenio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_convenioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cadastro_convenioAggregateArgs>(args: Subset<T, Cadastro_convenioAggregateArgs>): Prisma.PrismaPromise<GetCadastro_convenioAggregateType<T>>

    /**
     * Group by Cadastro_convenio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_convenioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cadastro_convenioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cadastro_convenioGroupByArgs['orderBy'] }
        : { orderBy?: cadastro_convenioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cadastro_convenioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCadastro_convenioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cadastro_convenio model
   */
  readonly fields: cadastro_convenioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cadastro_convenio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cadastro_convenioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the cadastro_convenio model
   */ 
  interface cadastro_convenioFieldRefs {
    readonly id: FieldRef<"cadastro_convenio", 'String'>
    readonly Nome_do_Convenio: FieldRef<"cadastro_convenio", 'String'>
    readonly CNPJ: FieldRef<"cadastro_convenio", 'String'>
    readonly Valores: FieldRef<"cadastro_convenio", 'String'>
    readonly Data_de_Contratacao: FieldRef<"cadastro_convenio", 'String'>
  }
    

  // Custom InputTypes

  /**
   * cadastro_convenio findUnique
   */
  export type cadastro_convenioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_convenio to fetch.
     */
    where: cadastro_convenioWhereUniqueInput
  }


  /**
   * cadastro_convenio findUniqueOrThrow
   */
  export type cadastro_convenioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_convenio to fetch.
     */
    where: cadastro_convenioWhereUniqueInput
  }


  /**
   * cadastro_convenio findFirst
   */
  export type cadastro_convenioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_convenio to fetch.
     */
    where?: cadastro_convenioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_convenios to fetch.
     */
    orderBy?: cadastro_convenioOrderByWithRelationInput | cadastro_convenioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_convenios.
     */
    cursor?: cadastro_convenioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_convenios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_convenios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_convenios.
     */
    distinct?: Cadastro_convenioScalarFieldEnum | Cadastro_convenioScalarFieldEnum[]
  }


  /**
   * cadastro_convenio findFirstOrThrow
   */
  export type cadastro_convenioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_convenio to fetch.
     */
    where?: cadastro_convenioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_convenios to fetch.
     */
    orderBy?: cadastro_convenioOrderByWithRelationInput | cadastro_convenioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_convenios.
     */
    cursor?: cadastro_convenioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_convenios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_convenios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_convenios.
     */
    distinct?: Cadastro_convenioScalarFieldEnum | Cadastro_convenioScalarFieldEnum[]
  }


  /**
   * cadastro_convenio findMany
   */
  export type cadastro_convenioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_convenios to fetch.
     */
    where?: cadastro_convenioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_convenios to fetch.
     */
    orderBy?: cadastro_convenioOrderByWithRelationInput | cadastro_convenioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cadastro_convenios.
     */
    cursor?: cadastro_convenioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_convenios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_convenios.
     */
    skip?: number
    distinct?: Cadastro_convenioScalarFieldEnum | Cadastro_convenioScalarFieldEnum[]
  }


  /**
   * cadastro_convenio create
   */
  export type cadastro_convenioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * The data needed to create a cadastro_convenio.
     */
    data: XOR<cadastro_convenioCreateInput, cadastro_convenioUncheckedCreateInput>
  }


  /**
   * cadastro_convenio createMany
   */
  export type cadastro_convenioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cadastro_convenios.
     */
    data: cadastro_convenioCreateManyInput | cadastro_convenioCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * cadastro_convenio update
   */
  export type cadastro_convenioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * The data needed to update a cadastro_convenio.
     */
    data: XOR<cadastro_convenioUpdateInput, cadastro_convenioUncheckedUpdateInput>
    /**
     * Choose, which cadastro_convenio to update.
     */
    where: cadastro_convenioWhereUniqueInput
  }


  /**
   * cadastro_convenio updateMany
   */
  export type cadastro_convenioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cadastro_convenios.
     */
    data: XOR<cadastro_convenioUpdateManyMutationInput, cadastro_convenioUncheckedUpdateManyInput>
    /**
     * Filter which cadastro_convenios to update
     */
    where?: cadastro_convenioWhereInput
  }


  /**
   * cadastro_convenio upsert
   */
  export type cadastro_convenioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * The filter to search for the cadastro_convenio to update in case it exists.
     */
    where: cadastro_convenioWhereUniqueInput
    /**
     * In case the cadastro_convenio found by the `where` argument doesn't exist, create a new cadastro_convenio with this data.
     */
    create: XOR<cadastro_convenioCreateInput, cadastro_convenioUncheckedCreateInput>
    /**
     * In case the cadastro_convenio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cadastro_convenioUpdateInput, cadastro_convenioUncheckedUpdateInput>
  }


  /**
   * cadastro_convenio delete
   */
  export type cadastro_convenioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Filter which cadastro_convenio to delete.
     */
    where: cadastro_convenioWhereUniqueInput
  }


  /**
   * cadastro_convenio deleteMany
   */
  export type cadastro_convenioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_convenios to delete
     */
    where?: cadastro_convenioWhereInput
  }


  /**
   * cadastro_convenio without action
   */
  export type cadastro_convenioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
  }



  /**
   * Model cadastro_user
   */

  export type AggregateCadastro_user = {
    _count: Cadastro_userCountAggregateOutputType | null
    _avg: Cadastro_userAvgAggregateOutputType | null
    _sum: Cadastro_userSumAggregateOutputType | null
    _min: Cadastro_userMinAggregateOutputType | null
    _max: Cadastro_userMaxAggregateOutputType | null
  }

  export type Cadastro_userAvgAggregateOutputType = {
    recoveryCode: number | null
  }

  export type Cadastro_userSumAggregateOutputType = {
    recoveryCode: number | null
  }

  export type Cadastro_userMinAggregateOutputType = {
    id: string | null
    Nome: string | null
    Email: string | null
    Usuario: string | null
    Senha: string | null
    recoveryCode: number | null
  }

  export type Cadastro_userMaxAggregateOutputType = {
    id: string | null
    Nome: string | null
    Email: string | null
    Usuario: string | null
    Senha: string | null
    recoveryCode: number | null
  }

  export type Cadastro_userCountAggregateOutputType = {
    id: number
    Nome: number
    Email: number
    Usuario: number
    Senha: number
    recoveryCode: number
    _all: number
  }


  export type Cadastro_userAvgAggregateInputType = {
    recoveryCode?: true
  }

  export type Cadastro_userSumAggregateInputType = {
    recoveryCode?: true
  }

  export type Cadastro_userMinAggregateInputType = {
    id?: true
    Nome?: true
    Email?: true
    Usuario?: true
    Senha?: true
    recoveryCode?: true
  }

  export type Cadastro_userMaxAggregateInputType = {
    id?: true
    Nome?: true
    Email?: true
    Usuario?: true
    Senha?: true
    recoveryCode?: true
  }

  export type Cadastro_userCountAggregateInputType = {
    id?: true
    Nome?: true
    Email?: true
    Usuario?: true
    Senha?: true
    recoveryCode?: true
    _all?: true
  }

  export type Cadastro_userAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_user to aggregate.
     */
    where?: cadastro_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_users to fetch.
     */
    orderBy?: cadastro_userOrderByWithRelationInput | cadastro_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cadastro_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cadastro_users
    **/
    _count?: true | Cadastro_userCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cadastro_userAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cadastro_userSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cadastro_userMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cadastro_userMaxAggregateInputType
  }

  export type GetCadastro_userAggregateType<T extends Cadastro_userAggregateArgs> = {
        [P in keyof T & keyof AggregateCadastro_user]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCadastro_user[P]>
      : GetScalarType<T[P], AggregateCadastro_user[P]>
  }




  export type cadastro_userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cadastro_userWhereInput
    orderBy?: cadastro_userOrderByWithAggregationInput | cadastro_userOrderByWithAggregationInput[]
    by: Cadastro_userScalarFieldEnum[] | Cadastro_userScalarFieldEnum
    having?: cadastro_userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cadastro_userCountAggregateInputType | true
    _avg?: Cadastro_userAvgAggregateInputType
    _sum?: Cadastro_userSumAggregateInputType
    _min?: Cadastro_userMinAggregateInputType
    _max?: Cadastro_userMaxAggregateInputType
  }

  export type Cadastro_userGroupByOutputType = {
    id: string
    Nome: string
    Email: string
    Usuario: string
    Senha: string
    recoveryCode: number | null
    _count: Cadastro_userCountAggregateOutputType | null
    _avg: Cadastro_userAvgAggregateOutputType | null
    _sum: Cadastro_userSumAggregateOutputType | null
    _min: Cadastro_userMinAggregateOutputType | null
    _max: Cadastro_userMaxAggregateOutputType | null
  }

  type GetCadastro_userGroupByPayload<T extends cadastro_userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cadastro_userGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cadastro_userGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cadastro_userGroupByOutputType[P]>
            : GetScalarType<T[P], Cadastro_userGroupByOutputType[P]>
        }
      >
    >


  export type cadastro_userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome?: boolean
    Email?: boolean
    Usuario?: boolean
    Senha?: boolean
    recoveryCode?: boolean
  }, ExtArgs["result"]["cadastro_user"]>

  export type cadastro_userSelectScalar = {
    id?: boolean
    Nome?: boolean
    Email?: boolean
    Usuario?: boolean
    Senha?: boolean
    recoveryCode?: boolean
  }


  export type $cadastro_userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cadastro_user"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Nome: string
      Email: string
      Usuario: string
      Senha: string
      recoveryCode: number | null
    }, ExtArgs["result"]["cadastro_user"]>
    composites: {}
  }


  type cadastro_userGetPayload<S extends boolean | null | undefined | cadastro_userDefaultArgs> = $Result.GetResult<Prisma.$cadastro_userPayload, S>

  type cadastro_userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cadastro_userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Cadastro_userCountAggregateInputType | true
    }

  export interface cadastro_userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cadastro_user'], meta: { name: 'cadastro_user' } }
    /**
     * Find zero or one Cadastro_user that matches the filter.
     * @param {cadastro_userFindUniqueArgs} args - Arguments to find a Cadastro_user
     * @example
     * // Get one Cadastro_user
     * const cadastro_user = await prisma.cadastro_user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cadastro_userFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, cadastro_userFindUniqueArgs<ExtArgs>>
    ): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cadastro_user that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {cadastro_userFindUniqueOrThrowArgs} args - Arguments to find a Cadastro_user
     * @example
     * // Get one Cadastro_user
     * const cadastro_user = await prisma.cadastro_user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cadastro_userFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastro_userFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cadastro_user that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_userFindFirstArgs} args - Arguments to find a Cadastro_user
     * @example
     * // Get one Cadastro_user
     * const cadastro_user = await prisma.cadastro_user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cadastro_userFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastro_userFindFirstArgs<ExtArgs>>
    ): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cadastro_user that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_userFindFirstOrThrowArgs} args - Arguments to find a Cadastro_user
     * @example
     * // Get one Cadastro_user
     * const cadastro_user = await prisma.cadastro_user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cadastro_userFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastro_userFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cadastro_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cadastro_users
     * const cadastro_users = await prisma.cadastro_user.findMany()
     * 
     * // Get first 10 Cadastro_users
     * const cadastro_users = await prisma.cadastro_user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cadastro_userWithIdOnly = await prisma.cadastro_user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends cadastro_userFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastro_userFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cadastro_user.
     * @param {cadastro_userCreateArgs} args - Arguments to create a Cadastro_user.
     * @example
     * // Create one Cadastro_user
     * const Cadastro_user = await prisma.cadastro_user.create({
     *   data: {
     *     // ... data to create a Cadastro_user
     *   }
     * })
     * 
    **/
    create<T extends cadastro_userCreateArgs<ExtArgs>>(
      args: SelectSubset<T, cadastro_userCreateArgs<ExtArgs>>
    ): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cadastro_users.
     *     @param {cadastro_userCreateManyArgs} args - Arguments to create many Cadastro_users.
     *     @example
     *     // Create many Cadastro_users
     *     const cadastro_user = await prisma.cadastro_user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cadastro_userCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastro_userCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cadastro_user.
     * @param {cadastro_userDeleteArgs} args - Arguments to delete one Cadastro_user.
     * @example
     * // Delete one Cadastro_user
     * const Cadastro_user = await prisma.cadastro_user.delete({
     *   where: {
     *     // ... filter to delete one Cadastro_user
     *   }
     * })
     * 
    **/
    delete<T extends cadastro_userDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, cadastro_userDeleteArgs<ExtArgs>>
    ): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cadastro_user.
     * @param {cadastro_userUpdateArgs} args - Arguments to update one Cadastro_user.
     * @example
     * // Update one Cadastro_user
     * const cadastro_user = await prisma.cadastro_user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cadastro_userUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, cadastro_userUpdateArgs<ExtArgs>>
    ): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cadastro_users.
     * @param {cadastro_userDeleteManyArgs} args - Arguments to filter Cadastro_users to delete.
     * @example
     * // Delete a few Cadastro_users
     * const { count } = await prisma.cadastro_user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cadastro_userDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cadastro_userDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cadastro_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cadastro_users
     * const cadastro_user = await prisma.cadastro_user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cadastro_userUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, cadastro_userUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cadastro_user.
     * @param {cadastro_userUpsertArgs} args - Arguments to update or create a Cadastro_user.
     * @example
     * // Update or create a Cadastro_user
     * const cadastro_user = await prisma.cadastro_user.upsert({
     *   create: {
     *     // ... data to create a Cadastro_user
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cadastro_user we want to update
     *   }
     * })
    **/
    upsert<T extends cadastro_userUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, cadastro_userUpsertArgs<ExtArgs>>
    ): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cadastro_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_userCountArgs} args - Arguments to filter Cadastro_users to count.
     * @example
     * // Count the number of Cadastro_users
     * const count = await prisma.cadastro_user.count({
     *   where: {
     *     // ... the filter for the Cadastro_users we want to count
     *   }
     * })
    **/
    count<T extends cadastro_userCountArgs>(
      args?: Subset<T, cadastro_userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cadastro_userCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cadastro_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_userAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cadastro_userAggregateArgs>(args: Subset<T, Cadastro_userAggregateArgs>): Prisma.PrismaPromise<GetCadastro_userAggregateType<T>>

    /**
     * Group by Cadastro_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cadastro_userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cadastro_userGroupByArgs['orderBy'] }
        : { orderBy?: cadastro_userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cadastro_userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCadastro_userGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cadastro_user model
   */
  readonly fields: cadastro_userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cadastro_user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cadastro_userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the cadastro_user model
   */ 
  interface cadastro_userFieldRefs {
    readonly id: FieldRef<"cadastro_user", 'String'>
    readonly Nome: FieldRef<"cadastro_user", 'String'>
    readonly Email: FieldRef<"cadastro_user", 'String'>
    readonly Usuario: FieldRef<"cadastro_user", 'String'>
    readonly Senha: FieldRef<"cadastro_user", 'String'>
    readonly recoveryCode: FieldRef<"cadastro_user", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * cadastro_user findUnique
   */
  export type cadastro_userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_user to fetch.
     */
    where: cadastro_userWhereUniqueInput
  }


  /**
   * cadastro_user findUniqueOrThrow
   */
  export type cadastro_userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_user to fetch.
     */
    where: cadastro_userWhereUniqueInput
  }


  /**
   * cadastro_user findFirst
   */
  export type cadastro_userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_user to fetch.
     */
    where?: cadastro_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_users to fetch.
     */
    orderBy?: cadastro_userOrderByWithRelationInput | cadastro_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_users.
     */
    cursor?: cadastro_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_users.
     */
    distinct?: Cadastro_userScalarFieldEnum | Cadastro_userScalarFieldEnum[]
  }


  /**
   * cadastro_user findFirstOrThrow
   */
  export type cadastro_userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_user to fetch.
     */
    where?: cadastro_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_users to fetch.
     */
    orderBy?: cadastro_userOrderByWithRelationInput | cadastro_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_users.
     */
    cursor?: cadastro_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_users.
     */
    distinct?: Cadastro_userScalarFieldEnum | Cadastro_userScalarFieldEnum[]
  }


  /**
   * cadastro_user findMany
   */
  export type cadastro_userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Filter, which cadastro_users to fetch.
     */
    where?: cadastro_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_users to fetch.
     */
    orderBy?: cadastro_userOrderByWithRelationInput | cadastro_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cadastro_users.
     */
    cursor?: cadastro_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_users.
     */
    skip?: number
    distinct?: Cadastro_userScalarFieldEnum | Cadastro_userScalarFieldEnum[]
  }


  /**
   * cadastro_user create
   */
  export type cadastro_userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * The data needed to create a cadastro_user.
     */
    data: XOR<cadastro_userCreateInput, cadastro_userUncheckedCreateInput>
  }


  /**
   * cadastro_user createMany
   */
  export type cadastro_userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cadastro_users.
     */
    data: cadastro_userCreateManyInput | cadastro_userCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * cadastro_user update
   */
  export type cadastro_userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * The data needed to update a cadastro_user.
     */
    data: XOR<cadastro_userUpdateInput, cadastro_userUncheckedUpdateInput>
    /**
     * Choose, which cadastro_user to update.
     */
    where: cadastro_userWhereUniqueInput
  }


  /**
   * cadastro_user updateMany
   */
  export type cadastro_userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cadastro_users.
     */
    data: XOR<cadastro_userUpdateManyMutationInput, cadastro_userUncheckedUpdateManyInput>
    /**
     * Filter which cadastro_users to update
     */
    where?: cadastro_userWhereInput
  }


  /**
   * cadastro_user upsert
   */
  export type cadastro_userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * The filter to search for the cadastro_user to update in case it exists.
     */
    where: cadastro_userWhereUniqueInput
    /**
     * In case the cadastro_user found by the `where` argument doesn't exist, create a new cadastro_user with this data.
     */
    create: XOR<cadastro_userCreateInput, cadastro_userUncheckedCreateInput>
    /**
     * In case the cadastro_user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cadastro_userUpdateInput, cadastro_userUncheckedUpdateInput>
  }


  /**
   * cadastro_user delete
   */
  export type cadastro_userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Filter which cadastro_user to delete.
     */
    where: cadastro_userWhereUniqueInput
  }


  /**
   * cadastro_user deleteMany
   */
  export type cadastro_userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_users to delete
     */
    where?: cadastro_userWhereInput
  }


  /**
   * cadastro_user without action
   */
  export type cadastro_userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
  }



  /**
   * Model Fluxo_de_caixa
   */

  export type AggregateFluxo_de_caixa = {
    _count: Fluxo_de_caixaCountAggregateOutputType | null
    _min: Fluxo_de_caixaMinAggregateOutputType | null
    _max: Fluxo_de_caixaMaxAggregateOutputType | null
  }

  export type Fluxo_de_caixaMinAggregateOutputType = {
    id: string | null
    Descricao: string | null
    Valor: string | null
    Tipo: string | null
  }

  export type Fluxo_de_caixaMaxAggregateOutputType = {
    id: string | null
    Descricao: string | null
    Valor: string | null
    Tipo: string | null
  }

  export type Fluxo_de_caixaCountAggregateOutputType = {
    id: number
    Descricao: number
    Valor: number
    Tipo: number
    _all: number
  }


  export type Fluxo_de_caixaMinAggregateInputType = {
    id?: true
    Descricao?: true
    Valor?: true
    Tipo?: true
  }

  export type Fluxo_de_caixaMaxAggregateInputType = {
    id?: true
    Descricao?: true
    Valor?: true
    Tipo?: true
  }

  export type Fluxo_de_caixaCountAggregateInputType = {
    id?: true
    Descricao?: true
    Valor?: true
    Tipo?: true
    _all?: true
  }

  export type Fluxo_de_caixaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fluxo_de_caixa to aggregate.
     */
    where?: Fluxo_de_caixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fluxo_de_caixas to fetch.
     */
    orderBy?: Fluxo_de_caixaOrderByWithRelationInput | Fluxo_de_caixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Fluxo_de_caixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fluxo_de_caixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fluxo_de_caixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fluxo_de_caixas
    **/
    _count?: true | Fluxo_de_caixaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Fluxo_de_caixaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Fluxo_de_caixaMaxAggregateInputType
  }

  export type GetFluxo_de_caixaAggregateType<T extends Fluxo_de_caixaAggregateArgs> = {
        [P in keyof T & keyof AggregateFluxo_de_caixa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFluxo_de_caixa[P]>
      : GetScalarType<T[P], AggregateFluxo_de_caixa[P]>
  }




  export type Fluxo_de_caixaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Fluxo_de_caixaWhereInput
    orderBy?: Fluxo_de_caixaOrderByWithAggregationInput | Fluxo_de_caixaOrderByWithAggregationInput[]
    by: Fluxo_de_caixaScalarFieldEnum[] | Fluxo_de_caixaScalarFieldEnum
    having?: Fluxo_de_caixaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Fluxo_de_caixaCountAggregateInputType | true
    _min?: Fluxo_de_caixaMinAggregateInputType
    _max?: Fluxo_de_caixaMaxAggregateInputType
  }

  export type Fluxo_de_caixaGroupByOutputType = {
    id: string
    Descricao: string
    Valor: string
    Tipo: string
    _count: Fluxo_de_caixaCountAggregateOutputType | null
    _min: Fluxo_de_caixaMinAggregateOutputType | null
    _max: Fluxo_de_caixaMaxAggregateOutputType | null
  }

  type GetFluxo_de_caixaGroupByPayload<T extends Fluxo_de_caixaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Fluxo_de_caixaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Fluxo_de_caixaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Fluxo_de_caixaGroupByOutputType[P]>
            : GetScalarType<T[P], Fluxo_de_caixaGroupByOutputType[P]>
        }
      >
    >


  export type Fluxo_de_caixaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Descricao?: boolean
    Valor?: boolean
    Tipo?: boolean
  }, ExtArgs["result"]["fluxo_de_caixa"]>

  export type Fluxo_de_caixaSelectScalar = {
    id?: boolean
    Descricao?: boolean
    Valor?: boolean
    Tipo?: boolean
  }


  export type $Fluxo_de_caixaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Fluxo_de_caixa"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Descricao: string
      Valor: string
      Tipo: string
    }, ExtArgs["result"]["fluxo_de_caixa"]>
    composites: {}
  }


  type Fluxo_de_caixaGetPayload<S extends boolean | null | undefined | Fluxo_de_caixaDefaultArgs> = $Result.GetResult<Prisma.$Fluxo_de_caixaPayload, S>

  type Fluxo_de_caixaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Fluxo_de_caixaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Fluxo_de_caixaCountAggregateInputType | true
    }

  export interface Fluxo_de_caixaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fluxo_de_caixa'], meta: { name: 'Fluxo_de_caixa' } }
    /**
     * Find zero or one Fluxo_de_caixa that matches the filter.
     * @param {Fluxo_de_caixaFindUniqueArgs} args - Arguments to find a Fluxo_de_caixa
     * @example
     * // Get one Fluxo_de_caixa
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Fluxo_de_caixaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Fluxo_de_caixaFindUniqueArgs<ExtArgs>>
    ): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Fluxo_de_caixa that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Fluxo_de_caixaFindUniqueOrThrowArgs} args - Arguments to find a Fluxo_de_caixa
     * @example
     * // Get one Fluxo_de_caixa
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Fluxo_de_caixaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Fluxo_de_caixaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Fluxo_de_caixa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fluxo_de_caixaFindFirstArgs} args - Arguments to find a Fluxo_de_caixa
     * @example
     * // Get one Fluxo_de_caixa
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Fluxo_de_caixaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Fluxo_de_caixaFindFirstArgs<ExtArgs>>
    ): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Fluxo_de_caixa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fluxo_de_caixaFindFirstOrThrowArgs} args - Arguments to find a Fluxo_de_caixa
     * @example
     * // Get one Fluxo_de_caixa
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Fluxo_de_caixaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Fluxo_de_caixaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Fluxo_de_caixas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fluxo_de_caixaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fluxo_de_caixas
     * const fluxo_de_caixas = await prisma.fluxo_de_caixa.findMany()
     * 
     * // Get first 10 Fluxo_de_caixas
     * const fluxo_de_caixas = await prisma.fluxo_de_caixa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fluxo_de_caixaWithIdOnly = await prisma.fluxo_de_caixa.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Fluxo_de_caixaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Fluxo_de_caixaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Fluxo_de_caixa.
     * @param {Fluxo_de_caixaCreateArgs} args - Arguments to create a Fluxo_de_caixa.
     * @example
     * // Create one Fluxo_de_caixa
     * const Fluxo_de_caixa = await prisma.fluxo_de_caixa.create({
     *   data: {
     *     // ... data to create a Fluxo_de_caixa
     *   }
     * })
     * 
    **/
    create<T extends Fluxo_de_caixaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Fluxo_de_caixaCreateArgs<ExtArgs>>
    ): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Fluxo_de_caixas.
     *     @param {Fluxo_de_caixaCreateManyArgs} args - Arguments to create many Fluxo_de_caixas.
     *     @example
     *     // Create many Fluxo_de_caixas
     *     const fluxo_de_caixa = await prisma.fluxo_de_caixa.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Fluxo_de_caixaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Fluxo_de_caixaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Fluxo_de_caixa.
     * @param {Fluxo_de_caixaDeleteArgs} args - Arguments to delete one Fluxo_de_caixa.
     * @example
     * // Delete one Fluxo_de_caixa
     * const Fluxo_de_caixa = await prisma.fluxo_de_caixa.delete({
     *   where: {
     *     // ... filter to delete one Fluxo_de_caixa
     *   }
     * })
     * 
    **/
    delete<T extends Fluxo_de_caixaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Fluxo_de_caixaDeleteArgs<ExtArgs>>
    ): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Fluxo_de_caixa.
     * @param {Fluxo_de_caixaUpdateArgs} args - Arguments to update one Fluxo_de_caixa.
     * @example
     * // Update one Fluxo_de_caixa
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Fluxo_de_caixaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Fluxo_de_caixaUpdateArgs<ExtArgs>>
    ): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Fluxo_de_caixas.
     * @param {Fluxo_de_caixaDeleteManyArgs} args - Arguments to filter Fluxo_de_caixas to delete.
     * @example
     * // Delete a few Fluxo_de_caixas
     * const { count } = await prisma.fluxo_de_caixa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Fluxo_de_caixaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Fluxo_de_caixaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fluxo_de_caixas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fluxo_de_caixaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fluxo_de_caixas
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Fluxo_de_caixaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Fluxo_de_caixaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fluxo_de_caixa.
     * @param {Fluxo_de_caixaUpsertArgs} args - Arguments to update or create a Fluxo_de_caixa.
     * @example
     * // Update or create a Fluxo_de_caixa
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.upsert({
     *   create: {
     *     // ... data to create a Fluxo_de_caixa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fluxo_de_caixa we want to update
     *   }
     * })
    **/
    upsert<T extends Fluxo_de_caixaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Fluxo_de_caixaUpsertArgs<ExtArgs>>
    ): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Fluxo_de_caixas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fluxo_de_caixaCountArgs} args - Arguments to filter Fluxo_de_caixas to count.
     * @example
     * // Count the number of Fluxo_de_caixas
     * const count = await prisma.fluxo_de_caixa.count({
     *   where: {
     *     // ... the filter for the Fluxo_de_caixas we want to count
     *   }
     * })
    **/
    count<T extends Fluxo_de_caixaCountArgs>(
      args?: Subset<T, Fluxo_de_caixaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Fluxo_de_caixaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fluxo_de_caixa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fluxo_de_caixaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Fluxo_de_caixaAggregateArgs>(args: Subset<T, Fluxo_de_caixaAggregateArgs>): Prisma.PrismaPromise<GetFluxo_de_caixaAggregateType<T>>

    /**
     * Group by Fluxo_de_caixa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fluxo_de_caixaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Fluxo_de_caixaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Fluxo_de_caixaGroupByArgs['orderBy'] }
        : { orderBy?: Fluxo_de_caixaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Fluxo_de_caixaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFluxo_de_caixaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Fluxo_de_caixa model
   */
  readonly fields: Fluxo_de_caixaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fluxo_de_caixa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Fluxo_de_caixaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Fluxo_de_caixa model
   */ 
  interface Fluxo_de_caixaFieldRefs {
    readonly id: FieldRef<"Fluxo_de_caixa", 'String'>
    readonly Descricao: FieldRef<"Fluxo_de_caixa", 'String'>
    readonly Valor: FieldRef<"Fluxo_de_caixa", 'String'>
    readonly Tipo: FieldRef<"Fluxo_de_caixa", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Fluxo_de_caixa findUnique
   */
  export type Fluxo_de_caixaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Filter, which Fluxo_de_caixa to fetch.
     */
    where: Fluxo_de_caixaWhereUniqueInput
  }


  /**
   * Fluxo_de_caixa findUniqueOrThrow
   */
  export type Fluxo_de_caixaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Filter, which Fluxo_de_caixa to fetch.
     */
    where: Fluxo_de_caixaWhereUniqueInput
  }


  /**
   * Fluxo_de_caixa findFirst
   */
  export type Fluxo_de_caixaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Filter, which Fluxo_de_caixa to fetch.
     */
    where?: Fluxo_de_caixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fluxo_de_caixas to fetch.
     */
    orderBy?: Fluxo_de_caixaOrderByWithRelationInput | Fluxo_de_caixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fluxo_de_caixas.
     */
    cursor?: Fluxo_de_caixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fluxo_de_caixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fluxo_de_caixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fluxo_de_caixas.
     */
    distinct?: Fluxo_de_caixaScalarFieldEnum | Fluxo_de_caixaScalarFieldEnum[]
  }


  /**
   * Fluxo_de_caixa findFirstOrThrow
   */
  export type Fluxo_de_caixaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Filter, which Fluxo_de_caixa to fetch.
     */
    where?: Fluxo_de_caixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fluxo_de_caixas to fetch.
     */
    orderBy?: Fluxo_de_caixaOrderByWithRelationInput | Fluxo_de_caixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fluxo_de_caixas.
     */
    cursor?: Fluxo_de_caixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fluxo_de_caixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fluxo_de_caixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fluxo_de_caixas.
     */
    distinct?: Fluxo_de_caixaScalarFieldEnum | Fluxo_de_caixaScalarFieldEnum[]
  }


  /**
   * Fluxo_de_caixa findMany
   */
  export type Fluxo_de_caixaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Filter, which Fluxo_de_caixas to fetch.
     */
    where?: Fluxo_de_caixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fluxo_de_caixas to fetch.
     */
    orderBy?: Fluxo_de_caixaOrderByWithRelationInput | Fluxo_de_caixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fluxo_de_caixas.
     */
    cursor?: Fluxo_de_caixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fluxo_de_caixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fluxo_de_caixas.
     */
    skip?: number
    distinct?: Fluxo_de_caixaScalarFieldEnum | Fluxo_de_caixaScalarFieldEnum[]
  }


  /**
   * Fluxo_de_caixa create
   */
  export type Fluxo_de_caixaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * The data needed to create a Fluxo_de_caixa.
     */
    data: XOR<Fluxo_de_caixaCreateInput, Fluxo_de_caixaUncheckedCreateInput>
  }


  /**
   * Fluxo_de_caixa createMany
   */
  export type Fluxo_de_caixaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fluxo_de_caixas.
     */
    data: Fluxo_de_caixaCreateManyInput | Fluxo_de_caixaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Fluxo_de_caixa update
   */
  export type Fluxo_de_caixaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * The data needed to update a Fluxo_de_caixa.
     */
    data: XOR<Fluxo_de_caixaUpdateInput, Fluxo_de_caixaUncheckedUpdateInput>
    /**
     * Choose, which Fluxo_de_caixa to update.
     */
    where: Fluxo_de_caixaWhereUniqueInput
  }


  /**
   * Fluxo_de_caixa updateMany
   */
  export type Fluxo_de_caixaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fluxo_de_caixas.
     */
    data: XOR<Fluxo_de_caixaUpdateManyMutationInput, Fluxo_de_caixaUncheckedUpdateManyInput>
    /**
     * Filter which Fluxo_de_caixas to update
     */
    where?: Fluxo_de_caixaWhereInput
  }


  /**
   * Fluxo_de_caixa upsert
   */
  export type Fluxo_de_caixaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * The filter to search for the Fluxo_de_caixa to update in case it exists.
     */
    where: Fluxo_de_caixaWhereUniqueInput
    /**
     * In case the Fluxo_de_caixa found by the `where` argument doesn't exist, create a new Fluxo_de_caixa with this data.
     */
    create: XOR<Fluxo_de_caixaCreateInput, Fluxo_de_caixaUncheckedCreateInput>
    /**
     * In case the Fluxo_de_caixa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Fluxo_de_caixaUpdateInput, Fluxo_de_caixaUncheckedUpdateInput>
  }


  /**
   * Fluxo_de_caixa delete
   */
  export type Fluxo_de_caixaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Filter which Fluxo_de_caixa to delete.
     */
    where: Fluxo_de_caixaWhereUniqueInput
  }


  /**
   * Fluxo_de_caixa deleteMany
   */
  export type Fluxo_de_caixaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fluxo_de_caixas to delete
     */
    where?: Fluxo_de_caixaWhereInput
  }


  /**
   * Fluxo_de_caixa without action
   */
  export type Fluxo_de_caixaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Cadastro_pacientesScalarFieldEnum: {
    id: 'id',
    Nome: 'Nome',
    Telefone: 'Telefone',
    Email: 'Email',
    CPF_CNPJ: 'CPF_CNPJ',
    Endereco: 'Endereco',
    Numero: 'Numero',
    CEP: 'CEP'
  };

  export type Cadastro_pacientesScalarFieldEnum = (typeof Cadastro_pacientesScalarFieldEnum)[keyof typeof Cadastro_pacientesScalarFieldEnum]


  export const AgendamentoScalarFieldEnum: {
    id: 'id',
    Nome: 'Nome',
    Telefone: 'Telefone',
    Especialista: 'Especialista',
    Data_do_Atendimento: 'Data_do_Atendimento',
    Horario_da_consulta: 'Horario_da_consulta',
    Valor_da_Consulta: 'Valor_da_Consulta',
    Status_da_Consulta: 'Status_da_Consulta',
    Status_do_pagamento: 'Status_do_pagamento',
    observacao: 'observacao'
  };

  export type AgendamentoScalarFieldEnum = (typeof AgendamentoScalarFieldEnum)[keyof typeof AgendamentoScalarFieldEnum]


  export const Cadastro_convenioScalarFieldEnum: {
    id: 'id',
    Nome_do_Convenio: 'Nome_do_Convenio',
    CNPJ: 'CNPJ',
    Valores: 'Valores',
    Data_de_Contratacao: 'Data_de_Contratacao'
  };

  export type Cadastro_convenioScalarFieldEnum = (typeof Cadastro_convenioScalarFieldEnum)[keyof typeof Cadastro_convenioScalarFieldEnum]


  export const Cadastro_userScalarFieldEnum: {
    id: 'id',
    Nome: 'Nome',
    Email: 'Email',
    Usuario: 'Usuario',
    Senha: 'Senha',
    recoveryCode: 'recoveryCode'
  };

  export type Cadastro_userScalarFieldEnum = (typeof Cadastro_userScalarFieldEnum)[keyof typeof Cadastro_userScalarFieldEnum]


  export const Fluxo_de_caixaScalarFieldEnum: {
    id: 'id',
    Descricao: 'Descricao',
    Valor: 'Valor',
    Tipo: 'Tipo'
  };

  export type Fluxo_de_caixaScalarFieldEnum = (typeof Fluxo_de_caixaScalarFieldEnum)[keyof typeof Fluxo_de_caixaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type Cadastro_pacientesWhereInput = {
    AND?: Cadastro_pacientesWhereInput | Cadastro_pacientesWhereInput[]
    OR?: Cadastro_pacientesWhereInput[]
    NOT?: Cadastro_pacientesWhereInput | Cadastro_pacientesWhereInput[]
    id?: StringFilter<"Cadastro_pacientes"> | string
    Nome?: StringFilter<"Cadastro_pacientes"> | string
    Telefone?: StringFilter<"Cadastro_pacientes"> | string
    Email?: StringFilter<"Cadastro_pacientes"> | string
    CPF_CNPJ?: StringFilter<"Cadastro_pacientes"> | string
    Endereco?: StringFilter<"Cadastro_pacientes"> | string
    Numero?: StringFilter<"Cadastro_pacientes"> | string
    CEP?: StringFilter<"Cadastro_pacientes"> | string
  }

  export type Cadastro_pacientesOrderByWithRelationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Email?: SortOrder
    CPF_CNPJ?: SortOrder
    Endereco?: SortOrder
    Numero?: SortOrder
    CEP?: SortOrder
  }

  export type Cadastro_pacientesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    CPF_CNPJ?: string
    AND?: Cadastro_pacientesWhereInput | Cadastro_pacientesWhereInput[]
    OR?: Cadastro_pacientesWhereInput[]
    NOT?: Cadastro_pacientesWhereInput | Cadastro_pacientesWhereInput[]
    Nome?: StringFilter<"Cadastro_pacientes"> | string
    Telefone?: StringFilter<"Cadastro_pacientes"> | string
    Email?: StringFilter<"Cadastro_pacientes"> | string
    Endereco?: StringFilter<"Cadastro_pacientes"> | string
    Numero?: StringFilter<"Cadastro_pacientes"> | string
    CEP?: StringFilter<"Cadastro_pacientes"> | string
  }, "id" | "CPF_CNPJ">

  export type Cadastro_pacientesOrderByWithAggregationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Email?: SortOrder
    CPF_CNPJ?: SortOrder
    Endereco?: SortOrder
    Numero?: SortOrder
    CEP?: SortOrder
    _count?: Cadastro_pacientesCountOrderByAggregateInput
    _max?: Cadastro_pacientesMaxOrderByAggregateInput
    _min?: Cadastro_pacientesMinOrderByAggregateInput
  }

  export type Cadastro_pacientesScalarWhereWithAggregatesInput = {
    AND?: Cadastro_pacientesScalarWhereWithAggregatesInput | Cadastro_pacientesScalarWhereWithAggregatesInput[]
    OR?: Cadastro_pacientesScalarWhereWithAggregatesInput[]
    NOT?: Cadastro_pacientesScalarWhereWithAggregatesInput | Cadastro_pacientesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Nome?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Telefone?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Email?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    CPF_CNPJ?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Endereco?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Numero?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    CEP?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
  }

  export type AgendamentoWhereInput = {
    AND?: AgendamentoWhereInput | AgendamentoWhereInput[]
    OR?: AgendamentoWhereInput[]
    NOT?: AgendamentoWhereInput | AgendamentoWhereInput[]
    id?: StringFilter<"Agendamento"> | string
    Nome?: StringFilter<"Agendamento"> | string
    Telefone?: StringFilter<"Agendamento"> | string
    Especialista?: StringFilter<"Agendamento"> | string
    Data_do_Atendimento?: StringFilter<"Agendamento"> | string
    Horario_da_consulta?: StringFilter<"Agendamento"> | string
    Valor_da_Consulta?: StringFilter<"Agendamento"> | string
    Status_da_Consulta?: StringFilter<"Agendamento"> | string
    Status_do_pagamento?: StringFilter<"Agendamento"> | string
    observacao?: StringFilter<"Agendamento"> | string
  }

  export type AgendamentoOrderByWithRelationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Especialista?: SortOrder
    Data_do_Atendimento?: SortOrder
    Horario_da_consulta?: SortOrder
    Valor_da_Consulta?: SortOrder
    Status_da_Consulta?: SortOrder
    Status_do_pagamento?: SortOrder
    observacao?: SortOrder
  }

  export type AgendamentoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AgendamentoWhereInput | AgendamentoWhereInput[]
    OR?: AgendamentoWhereInput[]
    NOT?: AgendamentoWhereInput | AgendamentoWhereInput[]
    Nome?: StringFilter<"Agendamento"> | string
    Telefone?: StringFilter<"Agendamento"> | string
    Especialista?: StringFilter<"Agendamento"> | string
    Data_do_Atendimento?: StringFilter<"Agendamento"> | string
    Horario_da_consulta?: StringFilter<"Agendamento"> | string
    Valor_da_Consulta?: StringFilter<"Agendamento"> | string
    Status_da_Consulta?: StringFilter<"Agendamento"> | string
    Status_do_pagamento?: StringFilter<"Agendamento"> | string
    observacao?: StringFilter<"Agendamento"> | string
  }, "id">

  export type AgendamentoOrderByWithAggregationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Especialista?: SortOrder
    Data_do_Atendimento?: SortOrder
    Horario_da_consulta?: SortOrder
    Valor_da_Consulta?: SortOrder
    Status_da_Consulta?: SortOrder
    Status_do_pagamento?: SortOrder
    observacao?: SortOrder
    _count?: AgendamentoCountOrderByAggregateInput
    _max?: AgendamentoMaxOrderByAggregateInput
    _min?: AgendamentoMinOrderByAggregateInput
  }

  export type AgendamentoScalarWhereWithAggregatesInput = {
    AND?: AgendamentoScalarWhereWithAggregatesInput | AgendamentoScalarWhereWithAggregatesInput[]
    OR?: AgendamentoScalarWhereWithAggregatesInput[]
    NOT?: AgendamentoScalarWhereWithAggregatesInput | AgendamentoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Agendamento"> | string
    Nome?: StringWithAggregatesFilter<"Agendamento"> | string
    Telefone?: StringWithAggregatesFilter<"Agendamento"> | string
    Especialista?: StringWithAggregatesFilter<"Agendamento"> | string
    Data_do_Atendimento?: StringWithAggregatesFilter<"Agendamento"> | string
    Horario_da_consulta?: StringWithAggregatesFilter<"Agendamento"> | string
    Valor_da_Consulta?: StringWithAggregatesFilter<"Agendamento"> | string
    Status_da_Consulta?: StringWithAggregatesFilter<"Agendamento"> | string
    Status_do_pagamento?: StringWithAggregatesFilter<"Agendamento"> | string
    observacao?: StringWithAggregatesFilter<"Agendamento"> | string
  }

  export type cadastro_convenioWhereInput = {
    AND?: cadastro_convenioWhereInput | cadastro_convenioWhereInput[]
    OR?: cadastro_convenioWhereInput[]
    NOT?: cadastro_convenioWhereInput | cadastro_convenioWhereInput[]
    id?: StringFilter<"cadastro_convenio"> | string
    Nome_do_Convenio?: StringFilter<"cadastro_convenio"> | string
    CNPJ?: StringFilter<"cadastro_convenio"> | string
    Valores?: StringFilter<"cadastro_convenio"> | string
    Data_de_Contratacao?: StringFilter<"cadastro_convenio"> | string
  }

  export type cadastro_convenioOrderByWithRelationInput = {
    id?: SortOrder
    Nome_do_Convenio?: SortOrder
    CNPJ?: SortOrder
    Valores?: SortOrder
    Data_de_Contratacao?: SortOrder
  }

  export type cadastro_convenioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: cadastro_convenioWhereInput | cadastro_convenioWhereInput[]
    OR?: cadastro_convenioWhereInput[]
    NOT?: cadastro_convenioWhereInput | cadastro_convenioWhereInput[]
    Nome_do_Convenio?: StringFilter<"cadastro_convenio"> | string
    CNPJ?: StringFilter<"cadastro_convenio"> | string
    Valores?: StringFilter<"cadastro_convenio"> | string
    Data_de_Contratacao?: StringFilter<"cadastro_convenio"> | string
  }, "id">

  export type cadastro_convenioOrderByWithAggregationInput = {
    id?: SortOrder
    Nome_do_Convenio?: SortOrder
    CNPJ?: SortOrder
    Valores?: SortOrder
    Data_de_Contratacao?: SortOrder
    _count?: cadastro_convenioCountOrderByAggregateInput
    _max?: cadastro_convenioMaxOrderByAggregateInput
    _min?: cadastro_convenioMinOrderByAggregateInput
  }

  export type cadastro_convenioScalarWhereWithAggregatesInput = {
    AND?: cadastro_convenioScalarWhereWithAggregatesInput | cadastro_convenioScalarWhereWithAggregatesInput[]
    OR?: cadastro_convenioScalarWhereWithAggregatesInput[]
    NOT?: cadastro_convenioScalarWhereWithAggregatesInput | cadastro_convenioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"cadastro_convenio"> | string
    Nome_do_Convenio?: StringWithAggregatesFilter<"cadastro_convenio"> | string
    CNPJ?: StringWithAggregatesFilter<"cadastro_convenio"> | string
    Valores?: StringWithAggregatesFilter<"cadastro_convenio"> | string
    Data_de_Contratacao?: StringWithAggregatesFilter<"cadastro_convenio"> | string
  }

  export type cadastro_userWhereInput = {
    AND?: cadastro_userWhereInput | cadastro_userWhereInput[]
    OR?: cadastro_userWhereInput[]
    NOT?: cadastro_userWhereInput | cadastro_userWhereInput[]
    id?: StringFilter<"cadastro_user"> | string
    Nome?: StringFilter<"cadastro_user"> | string
    Email?: StringFilter<"cadastro_user"> | string
    Usuario?: StringFilter<"cadastro_user"> | string
    Senha?: StringFilter<"cadastro_user"> | string
    recoveryCode?: IntNullableFilter<"cadastro_user"> | number | null
  }

  export type cadastro_userOrderByWithRelationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Email?: SortOrder
    Usuario?: SortOrder
    Senha?: SortOrder
    recoveryCode?: SortOrderInput | SortOrder
  }

  export type cadastro_userWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    Usuario?: string
    AND?: cadastro_userWhereInput | cadastro_userWhereInput[]
    OR?: cadastro_userWhereInput[]
    NOT?: cadastro_userWhereInput | cadastro_userWhereInput[]
    Nome?: StringFilter<"cadastro_user"> | string
    Email?: StringFilter<"cadastro_user"> | string
    Senha?: StringFilter<"cadastro_user"> | string
    recoveryCode?: IntNullableFilter<"cadastro_user"> | number | null
  }, "id" | "Usuario">

  export type cadastro_userOrderByWithAggregationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Email?: SortOrder
    Usuario?: SortOrder
    Senha?: SortOrder
    recoveryCode?: SortOrderInput | SortOrder
    _count?: cadastro_userCountOrderByAggregateInput
    _avg?: cadastro_userAvgOrderByAggregateInput
    _max?: cadastro_userMaxOrderByAggregateInput
    _min?: cadastro_userMinOrderByAggregateInput
    _sum?: cadastro_userSumOrderByAggregateInput
  }

  export type cadastro_userScalarWhereWithAggregatesInput = {
    AND?: cadastro_userScalarWhereWithAggregatesInput | cadastro_userScalarWhereWithAggregatesInput[]
    OR?: cadastro_userScalarWhereWithAggregatesInput[]
    NOT?: cadastro_userScalarWhereWithAggregatesInput | cadastro_userScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"cadastro_user"> | string
    Nome?: StringWithAggregatesFilter<"cadastro_user"> | string
    Email?: StringWithAggregatesFilter<"cadastro_user"> | string
    Usuario?: StringWithAggregatesFilter<"cadastro_user"> | string
    Senha?: StringWithAggregatesFilter<"cadastro_user"> | string
    recoveryCode?: IntNullableWithAggregatesFilter<"cadastro_user"> | number | null
  }

  export type Fluxo_de_caixaWhereInput = {
    AND?: Fluxo_de_caixaWhereInput | Fluxo_de_caixaWhereInput[]
    OR?: Fluxo_de_caixaWhereInput[]
    NOT?: Fluxo_de_caixaWhereInput | Fluxo_de_caixaWhereInput[]
    id?: StringFilter<"Fluxo_de_caixa"> | string
    Descricao?: StringFilter<"Fluxo_de_caixa"> | string
    Valor?: StringFilter<"Fluxo_de_caixa"> | string
    Tipo?: StringFilter<"Fluxo_de_caixa"> | string
  }

  export type Fluxo_de_caixaOrderByWithRelationInput = {
    id?: SortOrder
    Descricao?: SortOrder
    Valor?: SortOrder
    Tipo?: SortOrder
  }

  export type Fluxo_de_caixaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Fluxo_de_caixaWhereInput | Fluxo_de_caixaWhereInput[]
    OR?: Fluxo_de_caixaWhereInput[]
    NOT?: Fluxo_de_caixaWhereInput | Fluxo_de_caixaWhereInput[]
    Descricao?: StringFilter<"Fluxo_de_caixa"> | string
    Valor?: StringFilter<"Fluxo_de_caixa"> | string
    Tipo?: StringFilter<"Fluxo_de_caixa"> | string
  }, "id">

  export type Fluxo_de_caixaOrderByWithAggregationInput = {
    id?: SortOrder
    Descricao?: SortOrder
    Valor?: SortOrder
    Tipo?: SortOrder
    _count?: Fluxo_de_caixaCountOrderByAggregateInput
    _max?: Fluxo_de_caixaMaxOrderByAggregateInput
    _min?: Fluxo_de_caixaMinOrderByAggregateInput
  }

  export type Fluxo_de_caixaScalarWhereWithAggregatesInput = {
    AND?: Fluxo_de_caixaScalarWhereWithAggregatesInput | Fluxo_de_caixaScalarWhereWithAggregatesInput[]
    OR?: Fluxo_de_caixaScalarWhereWithAggregatesInput[]
    NOT?: Fluxo_de_caixaScalarWhereWithAggregatesInput | Fluxo_de_caixaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Fluxo_de_caixa"> | string
    Descricao?: StringWithAggregatesFilter<"Fluxo_de_caixa"> | string
    Valor?: StringWithAggregatesFilter<"Fluxo_de_caixa"> | string
    Tipo?: StringWithAggregatesFilter<"Fluxo_de_caixa"> | string
  }

  export type Cadastro_pacientesCreateInput = {
    id?: string
    Nome: string
    Telefone: string
    Email: string
    CPF_CNPJ: string
    Endereco: string
    Numero: string
    CEP: string
  }

  export type Cadastro_pacientesUncheckedCreateInput = {
    id?: string
    Nome: string
    Telefone: string
    Email: string
    CPF_CNPJ: string
    Endereco: string
    Numero: string
    CEP: string
  }

  export type Cadastro_pacientesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    CPF_CNPJ?: StringFieldUpdateOperationsInput | string
    Endereco?: StringFieldUpdateOperationsInput | string
    Numero?: StringFieldUpdateOperationsInput | string
    CEP?: StringFieldUpdateOperationsInput | string
  }

  export type Cadastro_pacientesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    CPF_CNPJ?: StringFieldUpdateOperationsInput | string
    Endereco?: StringFieldUpdateOperationsInput | string
    Numero?: StringFieldUpdateOperationsInput | string
    CEP?: StringFieldUpdateOperationsInput | string
  }

  export type Cadastro_pacientesCreateManyInput = {
    id?: string
    Nome: string
    Telefone: string
    Email: string
    CPF_CNPJ: string
    Endereco: string
    Numero: string
    CEP: string
  }

  export type Cadastro_pacientesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    CPF_CNPJ?: StringFieldUpdateOperationsInput | string
    Endereco?: StringFieldUpdateOperationsInput | string
    Numero?: StringFieldUpdateOperationsInput | string
    CEP?: StringFieldUpdateOperationsInput | string
  }

  export type Cadastro_pacientesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    CPF_CNPJ?: StringFieldUpdateOperationsInput | string
    Endereco?: StringFieldUpdateOperationsInput | string
    Numero?: StringFieldUpdateOperationsInput | string
    CEP?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentoCreateInput = {
    id?: string
    Nome: string
    Telefone: string
    Especialista: string
    Data_do_Atendimento: string
    Horario_da_consulta: string
    Valor_da_Consulta: string
    Status_da_Consulta: string
    Status_do_pagamento: string
    observacao: string
  }

  export type AgendamentoUncheckedCreateInput = {
    id?: string
    Nome: string
    Telefone: string
    Especialista: string
    Data_do_Atendimento: string
    Horario_da_consulta: string
    Valor_da_Consulta: string
    Status_da_Consulta: string
    Status_do_pagamento: string
    observacao: string
  }

  export type AgendamentoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    Data_do_Atendimento?: StringFieldUpdateOperationsInput | string
    Horario_da_consulta?: StringFieldUpdateOperationsInput | string
    Valor_da_Consulta?: StringFieldUpdateOperationsInput | string
    Status_da_Consulta?: StringFieldUpdateOperationsInput | string
    Status_do_pagamento?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    Data_do_Atendimento?: StringFieldUpdateOperationsInput | string
    Horario_da_consulta?: StringFieldUpdateOperationsInput | string
    Valor_da_Consulta?: StringFieldUpdateOperationsInput | string
    Status_da_Consulta?: StringFieldUpdateOperationsInput | string
    Status_do_pagamento?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentoCreateManyInput = {
    id?: string
    Nome: string
    Telefone: string
    Especialista: string
    Data_do_Atendimento: string
    Horario_da_consulta: string
    Valor_da_Consulta: string
    Status_da_Consulta: string
    Status_do_pagamento: string
    observacao: string
  }

  export type AgendamentoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    Data_do_Atendimento?: StringFieldUpdateOperationsInput | string
    Horario_da_consulta?: StringFieldUpdateOperationsInput | string
    Valor_da_Consulta?: StringFieldUpdateOperationsInput | string
    Status_da_Consulta?: StringFieldUpdateOperationsInput | string
    Status_do_pagamento?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    Data_do_Atendimento?: StringFieldUpdateOperationsInput | string
    Horario_da_consulta?: StringFieldUpdateOperationsInput | string
    Valor_da_Consulta?: StringFieldUpdateOperationsInput | string
    Status_da_Consulta?: StringFieldUpdateOperationsInput | string
    Status_do_pagamento?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_convenioCreateInput = {
    id?: string
    Nome_do_Convenio: string
    CNPJ: string
    Valores: string
    Data_de_Contratacao: string
  }

  export type cadastro_convenioUncheckedCreateInput = {
    id?: string
    Nome_do_Convenio: string
    CNPJ: string
    Valores: string
    Data_de_Contratacao: string
  }

  export type cadastro_convenioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome_do_Convenio?: StringFieldUpdateOperationsInput | string
    CNPJ?: StringFieldUpdateOperationsInput | string
    Valores?: StringFieldUpdateOperationsInput | string
    Data_de_Contratacao?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_convenioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome_do_Convenio?: StringFieldUpdateOperationsInput | string
    CNPJ?: StringFieldUpdateOperationsInput | string
    Valores?: StringFieldUpdateOperationsInput | string
    Data_de_Contratacao?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_convenioCreateManyInput = {
    id?: string
    Nome_do_Convenio: string
    CNPJ: string
    Valores: string
    Data_de_Contratacao: string
  }

  export type cadastro_convenioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome_do_Convenio?: StringFieldUpdateOperationsInput | string
    CNPJ?: StringFieldUpdateOperationsInput | string
    Valores?: StringFieldUpdateOperationsInput | string
    Data_de_Contratacao?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_convenioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome_do_Convenio?: StringFieldUpdateOperationsInput | string
    CNPJ?: StringFieldUpdateOperationsInput | string
    Valores?: StringFieldUpdateOperationsInput | string
    Data_de_Contratacao?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_userCreateInput = {
    id?: string
    Nome: string
    Email: string
    Usuario: string
    Senha: string
    recoveryCode?: number | null
  }

  export type cadastro_userUncheckedCreateInput = {
    id?: string
    Nome: string
    Email: string
    Usuario: string
    Senha: string
    recoveryCode?: number | null
  }

  export type cadastro_userUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Usuario?: StringFieldUpdateOperationsInput | string
    Senha?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cadastro_userUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Usuario?: StringFieldUpdateOperationsInput | string
    Senha?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cadastro_userCreateManyInput = {
    id?: string
    Nome: string
    Email: string
    Usuario: string
    Senha: string
    recoveryCode?: number | null
  }

  export type cadastro_userUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Usuario?: StringFieldUpdateOperationsInput | string
    Senha?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cadastro_userUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Usuario?: StringFieldUpdateOperationsInput | string
    Senha?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Fluxo_de_caixaCreateInput = {
    id?: string
    Descricao: string
    Valor: string
    Tipo: string
  }

  export type Fluxo_de_caixaUncheckedCreateInput = {
    id?: string
    Descricao: string
    Valor: string
    Tipo: string
  }

  export type Fluxo_de_caixaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Descricao?: StringFieldUpdateOperationsInput | string
    Valor?: StringFieldUpdateOperationsInput | string
    Tipo?: StringFieldUpdateOperationsInput | string
  }

  export type Fluxo_de_caixaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Descricao?: StringFieldUpdateOperationsInput | string
    Valor?: StringFieldUpdateOperationsInput | string
    Tipo?: StringFieldUpdateOperationsInput | string
  }

  export type Fluxo_de_caixaCreateManyInput = {
    id?: string
    Descricao: string
    Valor: string
    Tipo: string
  }

  export type Fluxo_de_caixaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Descricao?: StringFieldUpdateOperationsInput | string
    Valor?: StringFieldUpdateOperationsInput | string
    Tipo?: StringFieldUpdateOperationsInput | string
  }

  export type Fluxo_de_caixaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Descricao?: StringFieldUpdateOperationsInput | string
    Valor?: StringFieldUpdateOperationsInput | string
    Tipo?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Cadastro_pacientesCountOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Email?: SortOrder
    CPF_CNPJ?: SortOrder
    Endereco?: SortOrder
    Numero?: SortOrder
    CEP?: SortOrder
  }

  export type Cadastro_pacientesMaxOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Email?: SortOrder
    CPF_CNPJ?: SortOrder
    Endereco?: SortOrder
    Numero?: SortOrder
    CEP?: SortOrder
  }

  export type Cadastro_pacientesMinOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Email?: SortOrder
    CPF_CNPJ?: SortOrder
    Endereco?: SortOrder
    Numero?: SortOrder
    CEP?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type AgendamentoCountOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Especialista?: SortOrder
    Data_do_Atendimento?: SortOrder
    Horario_da_consulta?: SortOrder
    Valor_da_Consulta?: SortOrder
    Status_da_Consulta?: SortOrder
    Status_do_pagamento?: SortOrder
    observacao?: SortOrder
  }

  export type AgendamentoMaxOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Especialista?: SortOrder
    Data_do_Atendimento?: SortOrder
    Horario_da_consulta?: SortOrder
    Valor_da_Consulta?: SortOrder
    Status_da_Consulta?: SortOrder
    Status_do_pagamento?: SortOrder
    observacao?: SortOrder
  }

  export type AgendamentoMinOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Especialista?: SortOrder
    Data_do_Atendimento?: SortOrder
    Horario_da_consulta?: SortOrder
    Valor_da_Consulta?: SortOrder
    Status_da_Consulta?: SortOrder
    Status_do_pagamento?: SortOrder
    observacao?: SortOrder
  }

  export type cadastro_convenioCountOrderByAggregateInput = {
    id?: SortOrder
    Nome_do_Convenio?: SortOrder
    CNPJ?: SortOrder
    Valores?: SortOrder
    Data_de_Contratacao?: SortOrder
  }

  export type cadastro_convenioMaxOrderByAggregateInput = {
    id?: SortOrder
    Nome_do_Convenio?: SortOrder
    CNPJ?: SortOrder
    Valores?: SortOrder
    Data_de_Contratacao?: SortOrder
  }

  export type cadastro_convenioMinOrderByAggregateInput = {
    id?: SortOrder
    Nome_do_Convenio?: SortOrder
    CNPJ?: SortOrder
    Valores?: SortOrder
    Data_de_Contratacao?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type cadastro_userCountOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Email?: SortOrder
    Usuario?: SortOrder
    Senha?: SortOrder
    recoveryCode?: SortOrder
  }

  export type cadastro_userAvgOrderByAggregateInput = {
    recoveryCode?: SortOrder
  }

  export type cadastro_userMaxOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Email?: SortOrder
    Usuario?: SortOrder
    Senha?: SortOrder
    recoveryCode?: SortOrder
  }

  export type cadastro_userMinOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Email?: SortOrder
    Usuario?: SortOrder
    Senha?: SortOrder
    recoveryCode?: SortOrder
  }

  export type cadastro_userSumOrderByAggregateInput = {
    recoveryCode?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type Fluxo_de_caixaCountOrderByAggregateInput = {
    id?: SortOrder
    Descricao?: SortOrder
    Valor?: SortOrder
    Tipo?: SortOrder
  }

  export type Fluxo_de_caixaMaxOrderByAggregateInput = {
    id?: SortOrder
    Descricao?: SortOrder
    Valor?: SortOrder
    Tipo?: SortOrder
  }

  export type Fluxo_de_caixaMinOrderByAggregateInput = {
    id?: SortOrder
    Descricao?: SortOrder
    Valor?: SortOrder
    Tipo?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use Cadastro_pacientesDefaultArgs instead
     */
    export type Cadastro_pacientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Cadastro_pacientesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgendamentoDefaultArgs instead
     */
    export type AgendamentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgendamentoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use cadastro_convenioDefaultArgs instead
     */
    export type cadastro_convenioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cadastro_convenioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use cadastro_userDefaultArgs instead
     */
    export type cadastro_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cadastro_userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Fluxo_de_caixaDefaultArgs instead
     */
    export type Fluxo_de_caixaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Fluxo_de_caixaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}